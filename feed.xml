<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://xli7654321.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://xli7654321.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-26T08:41:35+00:00</updated><id>https://xli7654321.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Gitalk</title><link href="https://xli7654321.github.io/blog/2024/gitalk/" rel="alternate" type="text/html" title="Gitalk"/><published>2024-05-25T12:02:00+00:00</published><updated>2024-05-25T12:02:00+00:00</updated><id>https://xli7654321.github.io/blog/2024/gitalk</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/gitalk/"><![CDATA[<h1 id="gitalk">Gitalk</h1> <p class="no_toc fs-6 fw-300">win11为Jekyll博客配置Gitalk</p> <p>在 Github 中的 Settings 找到位于最后的 Developer settings，在 OAuth Apps 中申请一个新的 OAuth App，得到 Client ID 和 Client secrets。</p> <p>在 <code class="language-plaintext highlighter-rouge">Gemfile</code> 中添加 <code class="language-plaintext highlighter-rouge">gem "jekyll-github-metadata"</code></p> <p>在 <code class="language-plaintext highlighter-rouge">_config.yml </code>中添加</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plugins:
  - jekyll-github-metadata
</code></pre></div></div> <p>然后在 <code class="language-plaintext highlighter-rouge">default.html</code> 的适当位置添加，上传到 github.io 后进行初始化</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- Gitalk start--&gt;</span>
{% if site.github.repository_url %}
<span class="c">&lt;!-- 通过yaml设置自定义的comments变量，并设置值为true，即可为单独的页面添加Gitalk --&gt;</span>
{% if page.comments %}
    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"gitalk-container"</span><span class="nt">&gt;&lt;/div&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="c">&lt;!-- id会变即每篇博客对应一个issue，但是导致每篇博客都需要手动初始化评论区 --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
        <span class="kd">let</span> <span class="nx">gitalk</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Gitalk </span><span class="p">({</span>
            <span class="na">clientID</span><span class="p">:</span> <span class="dl">'</span><span class="s1">13fe267844585bfc1fb6</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">clientSecret</span><span class="p">:</span> <span class="dl">'</span><span class="s1">0726d43fdedd84083fa2f3af7446d8ffa7b3d5f3</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">repo</span><span class="p">:</span> <span class="dl">'</span><span class="s1">{{ site.github.repository_name }}</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">owner</span><span class="p">:</span> <span class="dl">'</span><span class="s1">{{ site.github.owner_name }}</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">admin</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">{{ site.github.owner_name }}</span><span class="dl">'</span><span class="p">],</span>
            <span class="na">id</span><span class="p">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">pathname</span><span class="p">,</span> <span class="c1">// id会变即每篇博客对应一个issue，但是导致每篇博客都需要手动初始化评论区</span>
            <span class="na">distractionFreeMode</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="na">language</span><span class="p">:</span> <span class="dl">'</span><span class="s1">en</span><span class="dl">'</span>
        <span class="p">});</span>
        <span class="nx">gitalk</span><span class="p">.</span><span class="nf">render</span><span class="p">(</span><span class="dl">'</span><span class="s1">gitalk-container</span><span class="dl">'</span><span class="p">);</span>
    <span class="nt">&lt;/script&gt;</span>
{% endif %}
{% endif %}
<span class="c">&lt;!-- Gitalk end--&gt;</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="sample-posts"/><category term="Gitalk"/><summary type="html"><![CDATA[Gitalk Tutorial]]></summary></entry><entry><title type="html">Python</title><link href="https://xli7654321.github.io/blog/2024/python/" rel="alternate" type="text/html" title="Python"/><published>2024-05-25T12:01:00+00:00</published><updated>2024-05-25T12:01:00+00:00</updated><id>https://xli7654321.github.io/blog/2024/python</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/python/"><![CDATA[ <h2 id="python-基本语法-">Python 基本语法 <sup id="fnref:book" role="doc-noteref"><a href="#fn:book" class="footnote" rel="footnote">1</a></sup></h2> <h3 id="对象">对象</h3> <p>在 Python 中一切都是对象</p> <h4 id="变量">变量</h4> <p>Python 中直接赋值即可创建任意类型的变量。Python 采用基于值的内存管理模式。赋值语句的执行过程是：首先把等号右侧表达式的值计算出来，然后在内存中寻找一个位置把值存放进去，最后创建变量并指向这个内存地址（给内存地址贴标签）。<span class="text-pink-200">Python 中的变量并不直接存储值，而是存储值的内存地址。</span>因此，变量类型可以随时改变。</p> <p class="note">变量名必须以字母或下划线开头。以下划线开头的变量具有<a href="/blog/2024/python/#python">特殊含义</a></p> <p>内置函数 <code class="language-plaintext highlighter-rouge">type(x)</code> 用于查看变量类型，或使用 <code class="language-plaintext highlighter-rouge">isinstance(x, int)</code> 来测试变量是否为指定类型。</p> <h4 id="数字">数字</h4> <ul> <li>整数 - int、 实数 - float、复数 - complex</li> </ul> <p>由于精度的问题，实数运算可能会有一定的误差。因此，应尽量避免在实数之间直接进行相等性比较，而是应该以<span class="text-pink-200">两者之差的绝对值是否足够小</span>作为两个实数是否相等的依据。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="mf">0.4</span> <span class="o">-</span> <span class="mf">0.1</span>
<span class="mf">0.30000000000000004</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mf">0.4</span> <span class="o">-</span> <span class="mf">0.1</span> <span class="o">==</span> <span class="mf">0.3</span>
<span class="bp">False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">abs</span><span class="p">(</span><span class="mf">0.4</span> <span class="o">-</span> <span class="mf">0.1</span> <span class="o">-</span> <span class="mf">0.3</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mf">1e-6</span>  <span class="c1"># or math.isclose(a, b)
</span><span class="bp">True</span>
</code></pre></div></div> <p>Python 3.6 支持在数字中间插入单个下划线来提高数字的可读性 <code class="language-plaintext highlighter-rouge">1_000_000</code>。</p> <ul> <li>分数 / 高精度实数</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="n">fractions</span> <span class="kn">import</span> <span class="n">Fraction</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="n">decimal</span> <span class="kn">import</span> <span class="n">Decimal</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Fraction</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>  <span class="c1"># 分数
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">numerator</span>  <span class="c1"># 查看分子
</span><span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">denominator</span>  <span class="c1"># 查看分母
</span><span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="nc">Decimal</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">9</span><span class="p">)</span>  <span class="c1"># 高精度实数
</span></code></pre></div></div> <h4 id="字符串">字符串</h4> <p>Python 使用单引号、双引号、三单引号、三双引号作为定界符（delimiter）来表示字符串，并且不同的定界符之间可以互相嵌套。字符串之间拼接可以用 <code class="language-plaintext highlighter-rouge">+</code> 或 <code class="language-plaintext highlighter-rouge">''.join()</code>。</p> <p><code class="language-plaintext highlighter-rouge">str</code> 类型字符串与 <code class="language-plaintext highlighter-rouge">bytes</code> 类型字节串之间编码与解码</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="sh">'</span><span class="s">Hello World</span><span class="sh">'</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>
<span class="sa">b</span><span class="sh">'</span><span class="s">Hello World</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">b</span><span class="sh">'</span><span class="s">Hello World</span><span class="sh">'</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">Hello World</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="列表元组字典集合">列表、元组、字典、集合</h4> <table> <thead> <tr> <th style="text-align: left">比较项</th> <th style="text-align: left">list</th> <th style="text-align: left">tuple</th> <th style="text-align: left">dict</th> <th style="text-align: left">set</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">定界符</td> <td style="text-align: left">[ ]</td> <td style="text-align: left">( )</td> <td style="text-align: left">{ }</td> <td style="text-align: left">{ }</td> </tr> <tr> <td style="text-align: left">是否可变</td> <td style="text-align: left">是</td> <td style="text-align: left">否</td> <td style="text-align: left">是</td> <td style="text-align: left">是</td> </tr> <tr> <td style="text-align: left">是否有序</td> <td style="text-align: left">是</td> <td style="text-align: left">是</td> <td style="text-align: left">否</td> <td style="text-align: left">否</td> </tr> <tr> <td style="text-align: left">是否支持下标</td> <td style="text-align: left">是（使用整数序号作为下标）</td> <td style="text-align: left">同 list</td> <td style="text-align: left">是（使用“键”作为下标）</td> <td style="text-align: left">否</td> </tr> <tr> <td style="text-align: left">元素是否可重复</td> <td style="text-align: left">是</td> <td style="text-align: left">是</td> <td style="text-align: left">“值”可重复，“键”不可</td> <td style="text-align: left">否</td> </tr> <tr> <td style="text-align: left">元素查找速度</td> <td style="text-align: left">非常慢</td> <td style="text-align: left">很慢</td> <td style="text-align: left">非常快</td> <td style="text-align: left">非常快</td> </tr> <tr> <td style="text-align: left">新增和删除元素速度</td> <td style="text-align: left">尾部操作快，其他位置慢</td> <td style="text-align: left">不允许</td> <td style="text-align: left">快</td> <td style="text-align: left">快</td> </tr> </tbody> </table> <p class="note">如果元组中只有一个元素，后面的逗号不能省略。例如，<code class="language-plaintext highlighter-rouge">(3,)</code>。</p> <h3 id="运算符">运算符</h3> <table> <thead> <tr> <th style="text-align: left">易忘运算符</th> <th style="text-align: left">功能</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">/</td> <td style="text-align: left">除法</td> </tr> <tr> <td style="text-align: left">//</td> <td style="text-align: left">求整商，如果操作数中有实数</td> </tr> <tr> <td style="text-align: left">%</td> <td style="text-align: left">求余数</td> </tr> <tr> <td style="text-align: left">**</td> <td style="text-align: left">幂</td> </tr> <tr> <td style="text-align: left">or</td> <td style="text-align: left">或</td> </tr> <tr> <td style="text-align: left">and</td> <td style="text-align: left">与</td> </tr> <tr> <td style="text-align: left">not</td> <td style="text-align: left">非</td> </tr> <tr> <td style="text-align: left">is</td> <td style="text-align: left">测试是否为同一个对象（如果两个对象是同一个，两者具有相同的内存地址）</td> </tr> </tbody> </table> <p><code class="language-plaintext highlighter-rouge">==</code> 用于判断两个对象的值是否相等，<code class="language-plaintext highlighter-rouge">is</code> 用于判断两个对象是否是同一个。</p> <h3 id="关键字">关键字</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">keyword</span>
<span class="nf">print</span><span class="p">(</span><span class="n">keyword</span><span class="p">.</span><span class="n">kwlist</span><span class="p">)</span>  <span class="c1"># 查看关键字
</span></code></pre></div></div> <h3 id="内置函数">内置函数</h3> <p>Python的内置函数封装在模块 <code class="language-plaintext highlighter-rouge">__builtins__</code> 中，用 C 语言实现，可通过内置函数 <code class="language-plaintext highlighter-rouge">dir(obj)</code> 查看所有内置函数和内置对象：<code class="language-plaintext highlighter-rouge">&gt;&gt;&gt; dir(__builtins__)</code>。</p> <h4 id="类型转换与类型判断">类型转换与类型判断</h4> <p><code class="language-plaintext highlighter-rouge">bin(x)</code>、<code class="language-plaintext highlighter-rouge">oct(x)</code>、<code class="language-plaintext highlighter-rouge">hex(x)</code> 分别用于将整数转换为二进制、八进制和十六进制，其参数必须为整数。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">bin</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="sh">'</span><span class="s">0b1010</span><span class="sh">'</span>  <span class="c1"># 0b开头表示二进制数，同理0o、0x开头表示八、十六进制数
</span></code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">int(x, base)</code>、<code class="language-plaintext highlighter-rouge">float(x)</code>、<code class="language-plaintext highlighter-rouge">complex(real, imag)</code> 分别用于将其他类型的数据转换为整数、实数和复数。<code class="language-plaintext highlighter-rouge">int('0b1010', 2)</code> 的第二个参数 <code class="language-plaintext highlighter-rouge">base</code> 用于说明 <code class="language-plaintext highlighter-rouge">x</code> 的进制。</p> <p><code class="language-plaintext highlighter-rouge">str(obj)</code>、<code class="language-plaintext highlighter-rouge">bytes(x)</code>、<code class="language-plaintext highlighter-rouge">list(x)</code> 、<code class="language-plaintext highlighter-rouge">tuple(x)</code>、<code class="language-plaintext highlighter-rouge">dict(x)</code>、<code class="language-plaintext highlighter-rouge">set(x)</code>、<code class="language-plaintext highlighter-rouge">frozenset(x)</code> 分别用于将其他类型数据转换为字符串、字节串、列表、元组、字典、可变集合和不可变集合，或创建空对象。</p> <h4 id="计算">计算</h4> <p><code class="language-plaintext highlighter-rouge">abs(x)</code> 用于返回 <code class="language-plaintext highlighter-rouge">x</code> 的绝对值或复数 <code class="language-plaintext highlighter-rouge">x</code> 的模。</p> <p><code class="language-plaintext highlighter-rouge">max(x, key=None)</code>、<code class="language-plaintext highlighter-rouge">min(x, key=None)</code>、<code class="language-plaintext highlighter-rouge">sum(x, start=0)</code> 用于计算包含有限个元素的可迭代对象中所有元素的最大值、最小值以及所有元素之和。<code class="language-plaintext highlighter-rouge">key</code> 参数用于指定比较大小的规则，<code class="language-plaintext highlighter-rouge">start</code> 参数用于指定求和的初始值（指定 <code class="language-plaintext highlighter-rouge">start</code> 时返回 <code class="language-plaintext highlighter-rouge">start + sum(x)</code>）。</p> <p><code class="language-plaintext highlighter-rouge">round(x, ndigits)</code> 用于对 <code class="language-plaintext highlighter-rouge">x</code> 进行四舍五入，<code class="language-plaintext highlighter-rouge">ndigits</code> 参数用于指定返回值的小数位数，默认返回整数。</p> <h4 id="基本输入与输出">基本输入与输出</h4> <p><code class="language-plaintext highlighter-rouge">input()</code> 用于接收用户的键盘输入，输入的内容以字符串类型对待。</p> <p><code class="language-plaintext highlighter-rouge">print(value, sep='', end='\n', file=sys.stdout)</code> 用于将内容输出到控制台或指定文件中。<code class="language-plaintext highlighter-rouge">sep</code> 参数用于指定数据之间的分隔符，默认为空格。<code class="language-plaintext highlighter-rouge">end</code> 参数用于指定输出后的结束字符串，默认为换行符。<code class="language-plaintext highlighter-rouge">file</code> 参数用于指定输出位置，默认为控制台。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">output.txt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Hello, world!</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">f</span><span class="p">)</span>  <span class="c1"># 将内容写入到 output.txt 文件中
</span></code></pre></div></div> <h4 id="排序">排序</h4> <p><code class="language-plaintext highlighter-rouge">sorted(iterable, key=None, reverse=False)</code> 对可迭代对象进行排序并返回新列表。<code class="language-plaintext highlighter-rouge">key</code> 参数用于指定排序规则。<code class="language-plaintext highlighter-rouge">reverse</code> 参数用于指定升序或降序，默认为 False 表示升序。</p> <p><code class="language-plaintext highlighter-rouge">reversed(iterable)</code> 对可迭代对象进行翻转并返回可迭代的 reversed 对象。</p> <h4 id="具有惰性求值特性的函数">具有惰性求值特性的函数</h4> <p>惰性求值（Lazy Evaluation）：仅在结果真正需要被计算时才进行计算。</p> <p><code class="language-plaintext highlighter-rouge">range(start, stop, step)</code> 返回包含左闭右开区间 <code class="language-plaintext highlighter-rouge">[start, stop)</code> 内以 <code class="language-plaintext highlighter-rouge">step</code> 为步长的整数。<code class="language-plaintext highlighter-rouge">start</code> 默认为 0，<code class="language-plaintext highlighter-rouge">step</code> 默认为 1。常用于控制循环的次数。</p> <p><code class="language-plaintext highlighter-rouge">enumerate(iterable, start)</code> 用于枚举可迭代对象中的元素，返回可迭代的 enumerate 对象，其中每个元素都是包含索引和值的元组。<code class="language-plaintext highlighter-rouge">start</code> 参数用于指定 index 的起始值。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">)):</span>
	<span class="nf">print</span><span class="p">((</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">12</span><span class="p">)</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">13</span><span class="p">)</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">zip(*iterables)</code> 用于把多个可迭代对象中的元素压缩到一起，返回一个可迭代的 zip 对象。其中每个元素都是包含原来对象的对应位置上元素的元组，最终结果中元素的个数取决于可迭代对象中最短的那个。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">list</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="sh">'</span><span class="s">abcd</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]))</span>
<span class="p">[(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">map(func, *iterables)</code> 把一个函数 <code class="language-plaintext highlighter-rouge">func</code> 依次映射到可迭代对象的每个元素上，返回一个可迭代的 map 对象，其中每个元素是原对象经过函数 <code class="language-plaintext highlighter-rouge">func</code> 处理后的结果。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)))</span>
<span class="p">[</span><span class="sh">'</span><span class="s">0</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">3</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">4</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">filter(func, iterable)</code> 将一个单参数函数 <code class="language-plaintext highlighter-rouge">func</code> 作用到一个可迭代对象上，返回该对象中使得该函数返回值等价于 True 的元素所组成的 filter 对象。若指定函数为 None，则返回对象中等价于 True 的元素。</p> <h4 id="reduce"><code class="language-plaintext highlighter-rouge">reduce()</code></h4> <p><code class="language-plaintext highlighter-rouge">reduce(func, seq, initial=None)</code> 将双参数函数 <code class="language-plaintext highlighter-rouge">func</code> 以迭代的方式从左到右依次应用到序列 <code class="language-plaintext highlighter-rouge">seq</code> 中的每个元素，并把中间计算结果作为下一次计算的第一个操作数，最终返回单个值作为结果。<code class="language-plaintext highlighter-rouge">initial</code> 参数用于指定一个初始值。该函数从 <code class="language-plaintext highlighter-rouge">functools</code> 库中导入，并可以结合 <code class="language-plaintext highlighter-rouge">operator</code> 库中提供的多种运算使用。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="n">functools</span> <span class="kn">import</span> <span class="nb">reduce</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="n">operator</span> <span class="kn">import</span> <span class="n">add</span><span class="p">,</span> <span class="n">sub</span><span class="p">,</span> <span class="n">mul</span><span class="p">,</span> <span class="n">truediv</span><span class="p">,</span> <span class="n">floordiv</span><span class="p">,</span> <span class="n">mod</span><span class="p">,</span> <span class="nb">pow</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">reduce</span><span class="p">(</span><span class="n">add</span><span class="p">,</span> <span class="n">seq</span><span class="p">)</span>
<span class="mi">45</span>
</code></pre></div></div> <h4 id="len"><code class="language-plaintext highlighter-rouge">len()</code></h4> <p><code class="language-plaintext highlighter-rouge">len(obj)</code> 返回对象 <code class="language-plaintext highlighter-rouge">obj</code> 包含的元素的个数，适用于 list、tuple、dict、set、str 以及 range 对象，不适用于具有惰性求值特性的对象。</p> <h4 id="all-any"><code class="language-plaintext highlighter-rouge">all()</code>, <code class="language-plaintext highlighter-rouge">any()</code></h4> <p><code class="language-plaintext highlighter-rouge">all(iterable)</code> 如果可迭代对象 iterable 中所有元素 x 的 <code class="language-plaintext highlighter-rouge">bool(x)</code> 都为 True，则返回 True。对于空的可迭代对象也返回 True。</p> <p><code class="language-plaintext highlighter-rouge">any(iterable)</code> 只要可迭代对象 iterable 中存在元素 x 使得 <code class="language-plaintext highlighter-rouge">bool(x)</code> 为 True，则返回 True。对于空的可迭代对象返回 False。</p> <h4 id="help"><code class="language-plaintext highlighter-rouge">help()</code></h4> <p><code class="language-plaintext highlighter-rouge">help(obj)</code> 返回对象 <code class="language-plaintext highlighter-rouge">obj</code> 的帮助信息。</p> <p><a href="">用于查看函数的使用帮助</a></p> <h2 id="序列结构">序列结构</h2> <p>Python 中常用的序列结构包括列表、元组、字符串、字典、集合等，其中列表、元组、字符串等有序序列以及 range 对象均支持<strong>双向索引</strong>，即第一个元素索引为 0，第二个元素索引为 1，以此类推；若使用负数作为索引，则最后一个元素索引为 -1，倒数第二个元素索引为 -2，以此类推。</p> <h3 id="列表"><strong>列表</strong></h3> <p>列表是包含若干元素的有序连续内存空间。当列表增加或删除元素时，列表对象自动进行内存的扩展或收缩，从而保证相邻元素之间没有缝隙。列表应尽量从列表尾部进行元素的追加与删除操作。</p> <h4 id="列表的创建与删除">列表的创建与删除</h4> <p>使用“=”直接将一个列表赋值给变量即可创建列表对象。也可以使用 <code class="language-plaintext highlighter-rouge">list()</code> 把可迭代对象转换为列表。需要注意的是，把字典转换为列表时默认是将字典的”键“转换为列表，若想把字典的元素转换为列表，需要使用字典的 <code class="language-plaintext highlighter-rouge">dict.items()</code> 方法，也可以使用 <code class="language-plaintext highlighter-rouge">values()</code> 将字典的值转换为列表。当一个列表不再使用时，可以使用 <code class="language-plaintext highlighter-rouge">del</code> 命令删除。</p> <h4 id="列表常用方法">列表常用方法</h4> <ul> <li><code class="language-plaintext highlighter-rouge">append()</code>、<code class="language-plaintext highlighter-rouge">insert()</code>、<code class="language-plaintext highlighter-rouge">extend()</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">append(x)</code> 用于向列表尾部追加一个元素。<code class="language-plaintext highlighter-rouge">insert(index, x)</code> 用于向列表任意指定位置插入一个元素。<code class="language-plaintext highlighter-rouge">extend(x)</code> 用于将另一个可迭代对象中的所有元素追加到当前列表的尾部。这三个方法都不影响列表对象的内存地址（<code class="language-plaintext highlighter-rouge">id(obj)</code> 函数可以查看对象 <code class="language-plaintext highlighter-rouge">obj</code> 的内存地址）。</p> <ul> <li><code class="language-plaintext highlighter-rouge">pop()</code>、<code class="language-plaintext highlighter-rouge">remove()</code>、<code class="language-plaintext highlighter-rouge">clear()</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">pop([index])</code> 用于删除并返回列表指定位置上的元素，不指定参数时默认为 -1，即最后一个元素，对空列表调用会抛出异常。<code class="language-plaintext highlighter-rouge">remove(x)</code> 用于删除列表中首个与指定值相等的元素。若不存在则抛出异常。<code class="language-plaintext highlighter-rouge">clear()</code> 用于清空列表中的所有元素，保留列表对象。这三个方法同样都不影响列表对象的内存地址。同时，还可以使用 <code class="language-plaintext highlighter-rouge">del</code> 命令通过索引删除列表中指定位置的元素。</p> <ul> <li><code class="language-plaintext highlighter-rouge">count()</code>、<code class="language-plaintext highlighter-rouge">index()</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">count(x)</code> 用于返回列表中指定元素出现的次数，若不存在则返回 0。<code class="language-plaintext highlighter-rouge">index(x)</code> 返回指定元素在列表中首次出现的索引，若不存在则抛出异常。</p> <ul> <li><code class="language-plaintext highlighter-rouge">sort()</code>、<code class="language-plaintext highlighter-rouge">reverse()</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">sort(key=None, reverse=False)</code> 用于对列表中的元素进行排序，<code class="language-plaintext highlighter-rouge">key</code> 参数用于指定排序规则，<code class="language-plaintext highlighter-rouge">reverse</code> 参数默认为 False 表示升序，为 True 则表示降序。<code class="language-plaintext highlighter-rouge">reverse()</code> 用于将列表中的所有元素进行翻转，即首尾交换。</p> <p class="note"><code class="language-plaintext highlighter-rouge">sort()</code> 和 <code class="language-plaintext highlighter-rouge">reverse()</code> 对列表的排序都是原地排序，即列表的内存地址不变，但原列表中数据的顺序全部丢失，变为排序后的顺序。若不想丢失原来的顺序，则可以使用内置函数 <code class="language-plaintext highlighter-rouge">sorted()</code> 和 <code class="language-plaintext highlighter-rouge">reversed()</code>，分别返回新列表和 reversed 对象。</p> <ul> <li><code class="language-plaintext highlighter-rouge">copy()</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">copy()</code> 返回列表的浅复制。</p> <p class="note">浅复制是指生成一个新的列表并把原列表中所有元素的<strong>引用</strong>都复制到新列表中。若原列表中只包含不可变类型的数据则一般没有问题。但是，若原列表中包含可变类型的数据，由于浅复制只是复制元素的引用，于是修改任何一个都会影响到另外一个。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>  <span class="c1"># 浅复制
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>  <span class="c1"># 对可变的数据进行修改
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>  <span class="c1"># 由于浅复制，原列表也会改变
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>  <span class="c1"># 对可变的数据进行修改
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="mi">6</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]]</span>  <span class="c1"># 不可变的数据不受影响
</span></code></pre></div></div> <p>列表的切片操作和标准库 copy 中的 <code class="language-plaintext highlighter-rouge">copy()</code> 函数都是返回浅复制。若想使用深复制，则可以使用标准库 copy 中的 <code class="language-plaintext highlighter-rouge">deepcopy()</code> 函数。所谓深复制，是指对原列表中的元素进行递归，把所有的值都复制到新列表中，不再是复制引用，从而新列表和原列表之间是相互独立的。</p> <h4 id="列表支持的运算符">列表支持的运算符</h4> <p>列表支持加法运算符 <code class="language-plaintext highlighter-rouge">+</code>，但该操作不属于原地操作，而是返回一个新列表，并且效率较低。更推荐使用复合赋值运算符 <code class="language-plaintext highlighter-rouge">+=</code> 实现列表追加元素，并且属于原地操作，与 <code class="language-plaintext highlighter-rouge">extend()</code> 方法一样高效。</p> <p>列表也支持乘法运算符 <code class="language-plaintext highlighter-rouge">*</code>，用于列表和整数相乘，表示序列重复，返回新列表。<code class="language-plaintext highlighter-rouge">*=</code>也可用于列表元素重复，与 <code class="language-plaintext highlighter-rouge">+=</code> 一样属于原地操作。</p> <p>成员测试运算符 <code class="language-plaintext highlighter-rouge">in</code> 可用于测试列表中是否包含某个元素，查询时间随着列表长度的增加而线性增加。但是同样的操作对于集合而言则是常数级的。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">id</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="mi">2832802183680</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">id</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
<span class="mi">2832798807040</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">+=</span> <span class="n">y</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">id</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 内存地址不变
</span><span class="mi">2832802183680</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">*=</span> <span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">id</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 内存地址不变
</span><span class="mi">2832802183680</span>
<span class="o">&gt;&gt;&gt;</span> <span class="mi">5</span> <span class="ow">in</span> <span class="n">x</span>
<span class="bp">True</span>
</code></pre></div></div> <h4 id="列表推导式"><strong>列表推导式</strong></h4> <p>列表推导式（List Comprehensions）提供了一种创建列表的简洁方法，使用方括号作为定界符。其语法形式为：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">expression</span> <span class="k">for</span> <span class="n">variable1</span> <span class="ow">in</span> <span class="n">sequence1</span> <span class="k">if</span> <span class="n">condition1</span>
			<span class="k">for</span> <span class="n">variable2</span> <span class="ow">in</span> <span class="n">sequence2</span> <span class="k">if</span> <span class="n">condition2</span>
			<span class="k">for</span> <span class="n">variableN</span> <span class="ow">in</span> <span class="n">sequenceN</span> <span class="k">if</span> <span class="n">conditionN</span><span class="p">]</span>
</code></pre></div></div> <p>列表推导式在逻辑上等价于一个循环语句，但形式上更加简洁。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aList</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
<span class="c1"># 等价于
</span><span class="n">aList</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
	<span class="n">aList</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span>
</code></pre></div></div> <p>列表推导式常见的应用：</p> <ul> <li>实现嵌套列表的平铺</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">vec</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">num</span> <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">vec</span> <span class="k">for</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">elem</span><span class="p">]</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="c1"># 也可以使用 itertools 库中的 chain() 函数
</span><span class="o">&gt;&gt;&gt;</span> <span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">chain</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">list</span><span class="p">(</span><span class="nf">chain</span><span class="p">(</span><span class="o">*</span><span class="n">vec</span><span class="p">))</span>  <span class="c1"># *vec 使用序列解包，将 vec 中的所有子列表作为单独的参数传递给 chain()
</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>过滤不符合条件的元素</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">os</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">filename</span> <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="sh">'</span><span class="s">E:</span><span class="se">\\</span><span class="sh">'</span><span class="p">)</span> <span class="k">if</span> <span class="n">filename</span><span class="p">.</span><span class="nf">endswith</span><span class="p">((.</span><span class="n">png</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="n">jpg</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="n">gif</span><span class="sh">'</span><span class="s">))]
[</span><span class="sh">'</span><span class="n">logo</span><span class="p">.</span><span class="n">png</span><span class="sh">'</span><span class="s">]
</span></code></pre></div></div> <ul> <li>同时遍历多个列表</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="n">y</span><span class="p">]</span>
<span class="p">[(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)]</span>
</code></pre></div></div> <ul> <li>实现矩阵转置</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">matrix</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span> <span class="p">[</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">]]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[[</span><span class="n">row</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)]</span>
<span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">12</span><span class="p">]]</span>
<span class="c1"># 也可以使用 zip() 和 list() 来实现
</span><span class="o">&gt;&gt;&gt;</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nf">zip</span><span class="p">(</span><span class="o">*</span><span class="n">matrix</span><span class="p">)))</span>
<span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">],</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">],</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">12</span><span class="p">]]</span>
</code></pre></div></div> <h4 id="切片"><strong>切片</strong></h4> <p>切片不仅仅适用于列表，还适用于元组、字符串、range 对象，但是列表的切片操作具有最强大的功能。不仅可以使用切片来截取列表中的任何部分得到一个新列表，还可以来修改和删除列表中的部分元素，甚至可以为列表增加元素。</p> <p><strong>切片的语法：<code class="language-plaintext highlighter-rouge">[start:stop:step]</code></strong></p> <p><code class="language-plaintext highlighter-rouge">start</code> 表示切片开始的索引，默认为 0；<code class="language-plaintext highlighter-rouge">stop</code> 表示切片结束的索引（不包含），默认为列表的长度；<code class="language-plaintext highlighter-rouge">step</code> 表示切片的步长，默认为 1。当这三个为默认值时可以省略，省略步长的同时还可以省略第二个冒号。当 <code class="language-plaintext highlighter-rouge">step</code> 为负整数时，表示反向切片，即顺序变为从右向左，此时 <code class="language-plaintext highlighter-rouge">start</code> 应大于 <code class="language-plaintext highlighter-rouge">stop</code>。</p> <ul> <li>使用切片获取列表的部分元素</li> </ul> <p>切片可以返回列表中部分元素组成的新列表。与使用索引作为下标访问列表的元素不同，切片不会因为下标越界而抛出异常，而是简单地在列表尾部截断或返回一个空列表。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[::]</span>  <span class="c1"># 返回包含原列表中所有元素的新列表
</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[:]</span>  <span class="c1"># step 为 1 时，可以省略第二个冒号
</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># 返回包含原列表中所有元素的逆序列表
</span><span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># 改变步长，隔一个取一个
</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>  <span class="c1"># 指定切片开始和结束的索引，左闭右开区间
</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># 步长为负整数时，从右侧（索引值大）向左侧（索引值小）挨个选取
</span><span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">100</span><span class="p">]</span>  <span class="c1"># 切片结束索引大于列表长度，直接从尾部截断，不抛出异常
</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">100</span><span class="p">:]</span>  <span class="c1"># 切片开始索引大于列表长度，返回空列表
</span><span class="p">[]</span>
</code></pre></div></div> <ul> <li>使用切片为列表添加元素</li> </ul> <p>使用切片为列表添加元素不影响列表对象的内存地址，属于原地操作。添加元素时需保证 <code class="language-plaintext highlighter-rouge">start</code> 和 <code class="language-plaintext highlighter-rouge">stop</code> 的值相等，通过为原列表的切片赋值另一个列表来完成。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>  <span class="c1"># 延续上一节
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[:</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">]</span>  <span class="c1"># 相当于 x[0:0]，start 默认为 0 可以省略
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">):]</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">last</span><span class="sh">'</span><span class="p">]</span>  <span class="c1"># 同理，stop 默认为列表长度可以省略
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="sh">'</span><span class="s">last</span><span class="sh">'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">]</span>  <span class="c1"># 也可以一次性添加多个元素
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="sh">'</span><span class="s">dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="sh">'</span><span class="s">last</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>使用切片替换和修改列表中的元素</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="sh">'</span><span class="s">dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="sh">'</span><span class="s">last</span><span class="sh">'</span><span class="p">]</span>  <span class="c1"># 延续上一节
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">3</span><span class="p">:</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">]</span>  <span class="c1"># 替换列表元素，等号两边列表的长度相等
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="sh">'</span><span class="s">dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="sh">'</span><span class="s">last</span><span class="sh">'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="mi">9</span><span class="p">:]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>  <span class="c1"># 切片是连续的，等号两边列表的长度可以不相等
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">6</span><span class="p">,</span> <span class="sh">'</span><span class="s">dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>  <span class="c1"># 切片不连续（step = 2），等号两边列表的长度必须相等
</span><span class="nb">ValueError</span><span class="p">:</span> <span class="n">attempt</span> <span class="n">to</span> <span class="n">assign</span> <span class="n">sequence</span> <span class="n">of</span> <span class="n">size</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">extended</span> <span class="nb">slice</span> <span class="n">of</span> <span class="n">size</span> <span class="mi">6</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>使用切片删除列表中的元素</li> </ul> <p>可以通过赋值空列表的方法来删除元素，也可以使用 <code class="language-plaintext highlighter-rouge">del</code> 命令与切片结合来删除元素，并且切片可以不连续。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>  <span class="c1"># 延续上一节
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[:</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># 删除列表中前三个元素
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">x</span><span class="p">[</span><span class="mi">5</span><span class="p">:]</span>  <span class="c1"># 切片连续时 del 生效
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c1"># 切片不连续时赋值空列表的方法失效
</span><span class="nb">ValueError</span><span class="p">:</span> <span class="n">attempt</span> <span class="n">to</span> <span class="n">assign</span> <span class="n">sequence</span> <span class="n">of</span> <span class="n">size</span> <span class="mi">0</span> <span class="n">to</span> <span class="n">extended</span> <span class="nb">slice</span> <span class="n">of</span> <span class="n">size</span> <span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">x</span><span class="p">[::</span><span class="mi">2</span><span class="p">]</span>  <span class="c1"># 切片不连续时 del 生效
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
</code></pre></div></div> <ul> <li>切片得到的是列表的浅复制</li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="p">[::]</span>  <span class="c1"># 切片，浅复制
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span>  <span class="c1"># 两个列表的值相等
</span><span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="ow">is</span> <span class="n">y</span>  <span class="c1"># 两个列表并不是同一个对象
</span><span class="bp">False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">id</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="nf">id</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>  <span class="c1"># 两个列表对象的内存地址（值的引用）不相等
</span><span class="bp">False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">id</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="nf">id</span><span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># 但是相同的值在内存中只有一份
</span><span class="bp">True</span>
</code></pre></div></div> <h3 id="元组">元组</h3> <p>元组同样支持使用双向索引来访问其中的元素，但元组属于不可变序列，不可以直接修改元组中元素的值，也无法为元组增加或删除元素，只能使用 <code class="language-plaintext highlighter-rouge">del</code> 命令删除整个元组。元组的切片只能用来访问元组中的元素。从一定程度上讲，元组可以看作是轻量级的列表或”常量“列表，因此元组的访问速度要比列表更快。</p> <h4 id="生成器推导式">生成器推导式</h4> <p>生成器推导式使用圆括号作为定界符，与列表推导式最大的不同是，生成器推导式的结果是一个<strong>生成器对象</strong>。生成器对象属于迭代器对象，具有<strong>惰性求值</strong>的特点，只在需要时生成新元素，比列表推导式具有更高的效率。</p> <p>使用生成器对象的元素时，可以将其转化为列表或元组，也可以使用生成器对象的 <code class="language-plaintext highlighter-rouge">__next__()</code> 方法或内置函数 <code class="language-plaintext highlighter-rouge">next()</code> 进行遍历，或直接使用 for 循环来遍历。不管使用哪种方法，都只能从<strong>前向后正向访问</strong>其中的元素，<strong>没有任何方法可以再次访问已经访问过的元素（一个生成器对象中的元素只能访问一次），也不支持使用下标直接访问其中任意位置的元素</strong>。若需要重新访问元素，必须重新创建该生成器对象。enumerate、filter、map、zip 等对象也具有同样的特点。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>  <span class="c1"># 创建生成器对象
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span>
<span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="o">&lt;</span><span class="n">genexpr</span><span class="o">&gt;</span> <span class="n">at</span> <span class="mh">0x00000293920A5890</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>  <span class="c1"># 将生成器对象转换为元组
</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">121</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">list</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>  <span class="c1"># 生成器对象已遍历结束，没有元素了
</span><span class="p">[]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="p">((</span><span class="n">i</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">**</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>  <span class="c1"># 重新创建生成器对象
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span>  <span class="c1"># 使用生成器对象的 __next__() 方法来获取元素
</span><span class="mi">4</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">g</span><span class="p">.</span><span class="nf">__next__</span><span class="p">()</span>
<span class="mi">9</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">next</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>  <span class="c1"># 使用内置函数 next() 来获取元素
</span><span class="mi">16</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="o">&lt;</span><span class="nb">map</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x00000293925182B0</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">next</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="sh">'</span><span class="s">0</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sh">'</span><span class="s">0</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">x</span>  <span class="c1"># 访问过的元素无法再次访问
</span><span class="bp">False</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sh">'</span><span class="s">1</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">x</span>  <span class="c1"># 未访问的元素
</span><span class="bp">True</span>
</code></pre></div></div> <h3 id="字典">字典</h3> <p>字典中元素的”键“可以是任意不可变数据，如整数、实数、复数、字符串、元组等类型的<strong>可哈希</strong>数据，但不能使用如列表、集合、字典等可变类型的数据。字典的”键“不允许重复，而”值“可以重复。字典在内部维护的哈希表使得检索操作非常快。使用内置字典类型 <code class="language-plaintext highlighter-rouge">dict</code> 时不必太在乎元素的顺序。如果需要一个可以严格记住元素插入顺序的字典，可以使用标准库 <code class="language-plaintext highlighter-rouge">collections</code> 中的 <code class="language-plaintext highlighter-rouge">OrderedDict</code> 类。</p> <p class="note">哈希是指能将大量的信息压缩成一个小的、固定大小的值的函数。如果一个对象是可哈希的，则其具有一个固定的哈希值，该值在该对象的整个生命周期都不会改变，即无论何时计算这个对象的哈希值，都会得到相同的结果（不可变的对象是可哈希的）。字典的键和集合的元素必须是可哈希的，才能借此进行快速查找。内置函数 <code class="language-plaintext highlighter-rouge">hash()</code> 可以用于测试一个对象是否可哈希，不必关心函数的返回值是什么，重点是对象是否可哈希，若对象不可哈希则会抛出异常。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">hash</span><span class="p">((</span><span class="mi">1</span><span class="p">,))</span>
<span class="o">-</span><span class="mi">6644214454873602895</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">hash</span><span class="p">([</span><span class="mi">1</span><span class="p">])</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="n">unhashable</span> <span class="nb">type</span><span class="p">:</span> <span class="sh">'</span><span class="s">list</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="字典元素的访问">字典元素的访问</h4> <p>字典中的每个元素表示一种映射关系，根据提供的”键“作为下标可以访问对应的”值“，若”键“不存在会抛出异常。字典提供了一个 <code class="language-plaintext highlighter-rouge">get(key)</code> 方法用于返回指定”键“对应的”值“，并且允许指定该”键“不存在时返回指定的”值“。字典还提供了 <code class="language-plaintext highlighter-rouge">setdefault(key, value)</code> 方法用于返回指定”键“对应的”值“，若该”键“不存在，就添加一个新元素并设置该”键“对应的”值“（默认为 None）。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">]</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">]</span>
<span class="nb">KeyError</span><span class="p">:</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Not Exists.</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">Not Exists.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</code></pre></div></div> <p>对字典直接进行遍历时默认是遍历字典的”键“，若要遍历字典的元素需要使用字典的 <code class="language-plaintext highlighter-rouge">items()</code> 方法，若要遍历字典的”值“需要使用字典的 <code class="language-plaintext highlighter-rouge">values()</code> 方法。</p> <h4 id="字典元素的添加修改与删除">字典元素的添加、修改与删除</h4> <p>当以指定”键“为下标为字典元素赋值时，若该”键“存在，表示修改该”键“所对应的值，若不存在则表示添加一个新的”键值对“。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span>  <span class="c1"># 指定的键存在
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">[</span><span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c1"># 指定的键不存在
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</code></pre></div></div> <p>字典的 <code class="language-plaintext highlighter-rouge">update()</code> 方法可以将另一个字典的元素一次性全部添加到当前字典中，若两个字典中存在相同的”键“，则以另一个字典中的”值“为准对当前字典进行更新。另外，也可以用上述的 <code class="language-plaintext highlighter-rouge">setdefault()</code> 方法来为字典添加新元素。<code class="language-plaintext highlighter-rouge">update()</code> 可以一次性添加多个元素，而 <code class="language-plaintext highlighter-rouge">setdefault()</code> 一次只能添加一个元素。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">})</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</code></pre></div></div> <p>字典的 <code class="language-plaintext highlighter-rouge">popitem()</code> 和 <code class="language-plaintext highlighter-rouge">pop(key[, default])</code> 方法可以弹出并删除指定的元素。<code class="language-plaintext highlighter-rouge">popitem()</code> 方法无参数，删除并返回最后添加进字典的元素，对空字典会抛出异常。<code class="language-plaintext highlighter-rouge">pop()</code> 方法弹出指定”键“对应的元素，<code class="language-plaintext highlighter-rouge">default</code> 参数指定若”键“不存在时返回的指定的值。当然，也可以用 <code class="language-plaintext highlighter-rouge">del</code> 命令来删除指定的元素。字典的 <code class="language-plaintext highlighter-rouge">clear()</code> 方法用于清空字典中的所有元素，<code class="language-plaintext highlighter-rouge">copy()</code> 方法用于返回字典的浅复制。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">,</span> <span class="sh">'</span><span class="s">e</span><span class="sh">'</span><span class="p">:</span> <span class="mi">4</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">popitem</span><span class="p">()</span>
<span class="p">(</span><span class="sh">'</span><span class="s">e</span><span class="sh">'</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{}</span>
</code></pre></div></div> <h3 id="集合">集合</h3> <p>集合中的元素必须是不可变类型的数据，并且元素之间不允许重复。</p> <h4 id="集合元素的添加与删除">集合元素的添加与删除</h4> <p>集合的 <code class="language-plaintext highlighter-rouge">add()</code> 方法用于添加新元素，若该元素已存在则忽略该操作，不会抛弃异常。<code class="language-plaintext highlighter-rouge">update()</code> 方法用于合并另一个集合中的元素到当前集合中，并自动去除重复元素。</p> <p>集合的 <code class="language-plaintext highlighter-rouge">pop()</code> 方法会从前向后删除并返回集合中的一个元素，若集合为空则抛出异常。<code class="language-plaintext highlighter-rouge">remove(x)</code> 方法用于删除集合中特定值的元素，若不存在则抛出异常。<code class="language-plaintext highlighter-rouge">discard(x)</code> 方法功能同 <code class="language-plaintext highlighter-rouge">remove()</code>，但若元素不存在会自动忽略，而不会抛出异常。<code class="language-plaintext highlighter-rouge">clear()</code> 用于清空集合。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">})</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nb">KeyError</span><span class="p">:</span> <span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="nf">set</span><span class="p">()</span>
</code></pre></div></div> <h4 id="集合运算">集合运算</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b_set</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span> <span class="o">|</span> <span class="n">b_set</span>  <span class="c1"># 并集
</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span><span class="p">.</span><span class="nf">union</span><span class="p">(</span><span class="n">b_set</span><span class="p">)</span>
<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span> <span class="o">&amp;</span> <span class="n">b_set</span>  <span class="c1"># 交集
</span><span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span><span class="p">.</span><span class="nf">intersection</span><span class="p">(</span><span class="n">b_set</span><span class="p">)</span>
<span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span> <span class="o">-</span> <span class="n">b_set</span>  <span class="c1"># 差集（A - B 返回包含在集合 A 中但不包含在集合 B 中的所有元素）
</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span><span class="p">.</span><span class="nf">difference</span><span class="p">(</span><span class="n">b_set</span><span class="p">)</span>
<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span> <span class="o">^</span> <span class="n">b_set</span>  <span class="c1"># 对称差集（A 的差集与 B 的差集的并集，即 (A - B) | (B - A)）
</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">a_set</span><span class="p">.</span><span class="nf">symmetric_difference</span><span class="p">(</span><span class="n">b_set</span><span class="p">)</span>
<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">z</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span>  <span class="c1"># 子集
</span><span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">.</span><span class="nf">issubset</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">&gt;</span> <span class="n">x</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span><span class="p">.</span><span class="nf">issuperset</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span><span class="p">.</span><span class="nf">isdisjoint</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>  <span class="c1"># 测试交集是否为空
</span><span class="bp">True</span>
</code></pre></div></div> <h3 id="序列解包"><strong>序列解包</strong></h3> <p>序列解包也可以称为多重赋值。星号 <code class="language-plaintext highlighter-rouge">*</code> 在列表、元组、字典（默认为对”键“操作）、集合、字符串等可迭代对象前使用，表示序列解包，即将其中的元素一一展开。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span>  <span class="c1"># 多个变量同时赋值
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">z</span>
<span class="sh">'</span><span class="s">a</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span>  <span class="c1"># 交换两个变量的值
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="mi">2</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">4</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>  <span class="c1"># * 表示可迭代对象的序列解包
</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="mi">4</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="mi">4</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span>
</code></pre></div></div> <h2 id="字符串-1">字符串</h2> <p>字符串属于<strong>不可变有序</strong>序列，同样支持双向索引、比较大小、计算长度、元素访问、切片、成员测试（in）等。由于字符串不可变，所以所有对字符串对象涉及“修改”的方法都是返回修改后的新字符串，原字符串并无任何改变。</p> <h3 id="字符串编码格式">字符串编码格式</h3> <p><code class="language-plaintext highlighter-rouge">UTF-8</code> 以一个字节表示英语字符，以三个字节表示常用汉字。</p> <p><code class="language-plaintext highlighter-rouge">GB2312/GBK</code> 前者是我国制定的中文编码，以一个字节表示英语字符，以两个字节表示常用汉字。</p> <p>Python 3 完全支持中文字符，默认使用 <code class="language-plaintext highlighter-rouge">UTF-8</code> 编码格式，无论是一个数字、英文字母，还是一个汉字，计算字符串长度时都按一个字符处理。</p> <h3 id="转义字符">转义字符</h3> <table> <thead> <tr> <th style="text-align: left">转义字符</th> <th style="text-align: left">含义</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\n</code></td> <td style="text-align: left">换行符</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\f</code></td> <td style="text-align: left">换页符</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\t</code></td> <td style="text-align: left">制表符（Tab）</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\r</code></td> <td style="text-align: left">回车</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\\</code></td> <td style="text-align: left">一个反斜线</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\'</code></td> <td style="text-align: left">一个单引号</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\"</code></td> <td style="text-align: left">一个双引号</td> </tr> </tbody> </table> <p>在使用文件路径、URL和正则表达式等场景下时，为了避免对字符串中的转义字符进行转义，可以使用原始字符串。在字符串的前面加上字母 r 或 R 表示原始字符串。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">C:\Windows</span><span class="se">\n</span><span class="s">otepad.exe</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
<span class="n">C</span><span class="p">:</span>\<span class="n">Windows</span>
<span class="n">otepad</span><span class="p">.</span><span class="n">exe</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">path</span> <span class="o">=</span> <span class="sa">r</span><span class="sh">'</span><span class="s">C:\Windows\notepad.exe</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
<span class="n">C</span><span class="p">:</span>\<span class="n">Windows</span>\<span class="n">notepad</span><span class="p">.</span><span class="n">exe</span>
</code></pre></div></div> <h3 id="字符串格式化">字符串格式化</h3> <h4 id="-formatting"><code class="language-plaintext highlighter-rouge">%-formatting</code></h4> <p>格式规范：<code class="language-plaintext highlighter-rouge">'%[-][+][0][m][.n][格式字符]' % x</code></p> <p><code class="language-plaintext highlighter-rouge">[-]</code> 用于指定<code class="language-plaintext highlighter-rouge">x</code>为左对齐。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Hello, %-10s</span><span class="sh">'</span> <span class="o">%</span> <span class="n">a</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
<span class="sh">'</span><span class="s">Hello, Leon      </span><span class="sh">'</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[+]</code> 用于对正数加正号。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1234</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="sh">'</span><span class="s">%+d</span><span class="sh">'</span> <span class="o">%</span> <span class="n">a</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
<span class="sh">'</span><span class="s">+1234</span><span class="sh">'</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[0]</code> 用于指定空位填0，适用于数值型的格式符（<code class="language-plaintext highlighter-rouge">%d</code>、<code class="language-plaintext highlighter-rouge">%f</code>）。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">7</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="sh">'</span><span class="s">%03d</span><span class="sh">'</span> <span class="o">%</span> <span class="n">a</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
<span class="sh">'</span><span class="s">007</span><span class="sh">'</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[m]</code> 用于指定最小宽度。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Hello, %10s</span><span class="sh">'</span> <span class="o">%</span> <span class="n">a</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
<span class="sh">'</span><span class="s">Hello,       Leon</span><span class="sh">'</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[.n]</code> 用于指定浮点数的精度。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1234</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span> <span class="o">=</span> <span class="sh">'</span><span class="s">%.2f</span><span class="sh">'</span> <span class="o">%</span> <span class="n">a</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">b</span>
<span class="sh">'</span><span class="s">1234.00</span><span class="sh">'</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[格式字符]</code></p> <table> <thead> <tr> <th style="text-align: left">格式字符</th> <th style="text-align: left">含义</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">s</code></td> <td style="text-align: left">字符串</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">c</code></td> <td style="text-align: left">整数转化为 Unicode 字符、字符串转化为其第一个字符</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">d</code></td> <td style="text-align: left">十进制整数</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">o</code></td> <td style="text-align: left">八进制整数</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">x</code></td> <td style="text-align: left">十六进制整数</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">e</code></td> <td style="text-align: left">以 e 为底的指数</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">f</code></td> <td style="text-align: left">浮点数</td> </tr> </tbody> </table> <p><code class="language-plaintext highlighter-rouge">x</code> 待格式化的内容，需与格式字符一一对应。</p> <h4 id="strformat"><strong><code class="language-plaintext highlighter-rouge">str.format()</code></strong></h4> <p>格式规范：<code class="language-plaintext highlighter-rouge">"{[field_name]:[format_spec]}".format(x)</code></p> <p><code class="language-plaintext highlighter-rouge">[field_name]</code> 用于指定要插入的变量 <code class="language-plaintext highlighter-rouge">x</code> 的名称或用数字表示索引（从 0 开始）。</p> <p><code class="language-plaintext highlighter-rouge">[format_spec]</code> = <code class="language-plaintext highlighter-rouge">[[fill]align][sign][#][0][width][grouping_option][.precision][type]</code></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 使用数字表示索引
</span><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">0: {0:.4s}, 1: {1:.4s}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">'</span><span class="s">dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">))</span>
<span class="mi">0</span><span class="p">:</span> <span class="n">drea</span><span class="p">,</span> <span class="mi">1</span><span class="p">:</span> <span class="n">drug</span>

<span class="c1"># 使用关键字参数和属性（ arg_name.attr_name ）
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
		<span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">person</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Leon</span><span class="sh">"</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">msg</span> <span class="o">=</span> <span class="sh">"</span><span class="s">My name is {person.name}, and I am {person.age} years old.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">person</span><span class="o">=</span><span class="n">person</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
<span class="n">My</span> <span class="n">name</span> <span class="ow">is</span> <span class="n">Leon</span><span class="p">,</span> <span class="ow">and</span> <span class="n">I</span> <span class="n">am</span> <span class="mi">22</span> <span class="n">years</span> <span class="n">old</span><span class="p">.</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[fill]</code> 填充字符，用于填充空白部分的单个字符，可以为任意字符，默认为空格。</p> <p><code class="language-plaintext highlighter-rouge">[align]</code> 对齐方式，<code class="language-plaintext highlighter-rouge">&lt;</code> 表示左对齐，<code class="language-plaintext highlighter-rouge">&gt;</code> 表示右对齐，<code class="language-plaintext highlighter-rouge">^</code> 表示居中对齐，<code class="language-plaintext highlighter-rouge">=</code> 表示将填充字符放在符号和数字之间（仅适用于数值类型）。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{:*^20}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">"</span><span class="s">PYTHON</span><span class="sh">"</span><span class="p">))</span>  <span class="c1"># 填充字符为 * 并居中对齐
</span><span class="o">*******</span><span class="n">PYTHON</span><span class="o">*******</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[sign]</code> 符号，<code class="language-plaintext highlighter-rouge">+</code> 表示在正数前面显示正号和负号，<code class="language-plaintext highlighter-rouge">-</code> 表示只在负数前显示负号（默认行为），<code class="language-plaintext highlighter-rouge"> </code> 空格表示在正数前面留空格。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{:=+10}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="mi">22</span><span class="p">))</span>  <span class="c1"># 将填充字符（空格）放在正号与数字之间
</span><span class="o">+</span>       <span class="mi">22</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[#]</code> 对于二进制、八进制、十六进制，如果加上 <code class="language-plaintext highlighter-rouge">#</code>，则会加上 <code class="language-plaintext highlighter-rouge">0b</code>、<code class="language-plaintext highlighter-rouge">0o</code> 或 <code class="language-plaintext highlighter-rouge">0x</code> 前缀。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{:#b}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="mi">22</span><span class="p">))</span>
<span class="mb">0b10110</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[0]</code> 用于指定空位填充为0（仅对数值类型有效）。</p> <p><code class="language-plaintext highlighter-rouge">[width]</code> 用于指定输出的最小字符宽度。如果输出的值小于这个数，将会使用填充字符补足。</p> <p><code class="language-plaintext highlighter-rouge">[grouping_option]</code> 指定数字的千位分隔符为 <code class="language-plaintext highlighter-rouge">_</code> 或 <code class="language-plaintext highlighter-rouge">,</code>。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{:_}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="mi">5000000</span><span class="p">))</span>
<span class="mi">5_000_000</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[.precision]</code> 精度，对于浮点数，表示小数点后的位数。对于字符串，表示输出的最大字符数。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{:.2f}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="mf">3.1415926</span><span class="p">))</span>
<span class="mf">3.14</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{:.3s}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">'</span><span class="s">ecust</span><span class="sh">'</span><span class="p">))</span>
<span class="n">ecu</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[type]</code></p> <table> <thead> <tr> <th style="text-align: left">格式字符</th> <th style="text-align: left">含义</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">b</code></td> <td style="text-align: left">二进制整数</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">%</code></td> <td style="text-align: left">输出百分比形式的浮点数（<code class="language-plaintext highlighter-rouge">"{:.2%}".format(0.25)</code>）</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">s</code>、<code class="language-plaintext highlighter-rouge">d</code>、<code class="language-plaintext highlighter-rouge">o</code>、<code class="language-plaintext highlighter-rouge">x</code>、<code class="language-plaintext highlighter-rouge">e</code>、<code class="language-plaintext highlighter-rouge">f</code>、<code class="language-plaintext highlighter-rouge">c</code></td> <td style="text-align: left">同 <a href="#-formatting"><code class="language-plaintext highlighter-rouge">%-formatting</code></a></td> </tr> </tbody> </table> <h4 id="f-string"><strong><code class="language-plaintext highlighter-rouge">f-string</code></strong></h4> <p>格式规范：<code class="language-plaintext highlighter-rouge">f"{[f_expression]:[format_spec]}"</code>，更详细见 <a href="https://docs.python.org/3.7/reference/lexical_analysis.html#formatted-string-literals">Python 官方教程 - Literals - Formatted string literals</a>。</p> <p><code class="language-plaintext highlighter-rouge">[f_expression]</code> 可以是任何有效的 Python 表达式，如变量名、算术表达式、调用函数、条件表达式、访问对象属性等。当<code class="language-plaintext highlighter-rouge">f-string</code> 被计算时，这个表达式的值会被计算并转换为字符串。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 变量名 / 方法调用
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Leon</span><span class="sh">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 算术表达式
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">10</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">20</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 列表和字典访问
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">info</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">age</span><span class="sh">'</span><span class="p">:</span> <span class="mi">22</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">numbers</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">info</span><span class="p">[</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 调用函数
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
	<span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Hello, </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">!</span><span class="sh">"</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Leon</span><span class="sh">"</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">greet</span><span class="p">(</span><span class="n">name</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 条件表达式（三元运算符）
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">10</span> <span class="k">else</span> <span class="sh">'</span><span class="s">x is less than or equal to 10</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># 访问对象属性
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
		<span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">person</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Leon</span><span class="sh">"</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sa">f</span><span class="sh">"</span><span class="s">My name is </span><span class="si">{</span><span class="n">person</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">, and I am </span><span class="si">{</span><span class="n">person</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old.</span><span class="sh">"</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">[format_spec]</code> 同 <a href="#strformat"><code class="language-plaintext highlighter-rouge">str.format()</code></a>。</p> <h3 id="字符串常用操作">字符串常用操作</h3> <h4 id="查找">查找</h4> <p><code class="language-plaintext highlighter-rouge">find()</code>、<code class="language-plaintext highlighter-rouge">rfind()</code> 用于查找一个字符串在另一个字符串指定范围（默认为整个字符串）中首次和最后一次出现的位置，若不存在则返回 -1。<code class="language-plaintext highlighter-rouge">rfind()</code> 相当于从右向左查找。</p> <p>参数：<code class="language-plaintext highlighter-rouge">find(sub[, start[, end]]) -&gt; int</code> <sup id="fnref:args" role="doc-noteref"><a href="#fn:args" class="footnote" rel="footnote">2</a></sup></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">apple, peach, banana, peach, pear</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">)</span>
<span class="mi">1</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">p</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="mi">7</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">index()</code>、<code class="language-plaintext highlighter-rouge">rindex()</code> 用法同上，不同之处在于，若不存在则抛出异常。</p> <p><code class="language-plaintext highlighter-rouge">count()</code> 用于查找一个字符串在另一个字符串中出现的次数，若不存在则返回 0。</p> <h4 id="分隔">分隔</h4> <p><code class="language-plaintext highlighter-rouge">split()</code>、<code class="language-plaintext highlighter-rouge">rsplit()</code> 用于以指定的分隔符，从字符串的左端和右端开始将其分隔成多个字符串，并以列表形式返回。</p> <p>参数：<code class="language-plaintext highlighter-rouge">split([sep[, maxsplit]])</code> <code class="language-plaintext highlighter-rouge">sep</code> 参数指定分隔符，<code class="language-plaintext highlighter-rouge">maxsplit</code> 参数指定分隔的最大次数，默认为 -1，即没有限制。若不指定分隔符，则字符串中任何空白符号（包括空格、换行符、制表符等）都将被认为是分隔符（多个连续的空白符号视为一个），返回不含空字符串的列表。但是，明确传递 <code class="language-plaintext highlighter-rouge">sep</code> 参数时，连续的相邻分隔符之间会得到空字符串。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">apple, peach, banana, peach, pear</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">)</span>
<span class="p">[</span><span class="sh">'</span><span class="s">apple</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> peach</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> banana</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> peach</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> pear</span><span class="sh">'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">e</span><span class="sh">'</span><span class="p">)</span>
<span class="p">[</span><span class="sh">'</span><span class="s">appl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">, p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ach, banana, p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ach, p</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ar</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">partition()</code>、<code class="language-plaintext highlighter-rouge">rpartition()</code> 用于以指定的分隔符将原字符串分隔为三部分，即分隔符之前的字符串、分隔符字符串、分隔符之后的字符串，并以元组的形式返回。若指定的分隔符不存在，则返回原字符串和两个空字符串。若存在多个指定的分隔符，<code class="language-plaintext highlighter-rouge">partition()</code> 以从左向右的第一个分隔符作为分隔符，<code class="language-plaintext highlighter-rouge">rpartition()</code> 则相反。</p> <h4 id="连接"><strong>连接</strong></h4> <p><code class="language-plaintext highlighter-rouge">join()</code> 以指定的连接符将多个字符串（多为列表形式）连接，返回新字符串。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">li</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">apple</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">peach</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">banana</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">pear</span><span class="sh">'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>  <span class="c1"># 以空格作为连接符
</span><span class="sh">'</span><span class="s">apple peach banana pear</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sh">'</span><span class="s">,</span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">li</span><span class="p">)</span>
<span class="sh">'</span><span class="s">apple,peach,banana,pear</span><span class="sh">'</span>  <span class="c1"># 以逗号作为连接符
</span></code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">join()</code> 和 <code class="language-plaintext highlighter-rouge">split()</code> 可以一起用于删除字符串中多余的空白字符，如果有连续多个空白字符，只保留一个。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">aaa     bb   c d eee  </span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">())</span>
<span class="sh">'</span><span class="s">aaa bb c d eee</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="大小写转换">大小写转换</h4> <p><code class="language-plaintext highlighter-rouge">lower()</code>、<code class="language-plaintext highlighter-rouge">upper()</code> 用于将字符串转换为小写、大写的字符串。</p> <p><code class="language-plaintext highlighter-rouge">capitalize()</code> 用于将字符串的首字母转换为大写。</p> <p><code class="language-plaintext highlighter-rouge">title()</code> 用于将字符串中的每个单词的首字母转换为大写。</p> <p><code class="language-plaintext highlighter-rouge">swapcase()</code> 用于将大小写互换。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">What is Your Name?</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span>
<span class="sh">'</span><span class="s">what is your name?</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span>
<span class="sh">'</span><span class="s">WHAT IS YOUR NAME?</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">capitalize</span><span class="p">()</span>
<span class="sh">'</span><span class="s">What is your name?</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">title</span><span class="p">()</span>
<span class="sh">'</span><span class="s">What Is Your Name?</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">swapcase</span><span class="p">()</span>
<span class="sh">'</span><span class="s">wHAT IS yOUR nAME?</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="替换">替换</h4> <p><code class="language-plaintext highlighter-rouge">replace()</code> 用于替换字符串中的指定字符，每次只能替换一种指定的字符。</p> <p>参数：<code class="language-plaintext highlighter-rouge">replace(old, new[, count])</code> 若提供了 <code class="language-plaintext highlighter-rouge">count</code> 参数，则只替换前 <code class="language-plaintext highlighter-rouge">count</code> 次出现的 <code class="language-plaintext highlighter-rouge">old</code> 字符。<code class="language-plaintext highlighter-rouge">count</code> 参数默认为 -1，即全部替换。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">a, b, c, a, a, d</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">123</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">123, b, c, 123, 123, d</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">123</span><span class="sh">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="sh">'</span><span class="s">123, b, c, a, a, d</span><span class="sh">'</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">maketrans()</code>、<code class="language-plaintext highlighter-rouge">translate()</code> 前者用于生成一个字符映射表，指定字符的一一对应的转换关系。而后者用于按照映射表的对应关系来替换字符串中的字符。这两个方法组合可以同时处理多个不同的单字符。</p> <p>参数：<code class="language-plaintext highlighter-rouge">maketrans(input, output[, delete])</code> 可选参数 <code class="language-plaintext highlighter-rouge">delete</code> 用于指定将在 <code class="language-plaintext highlighter-rouge">translate()</code> 后被删除的字符。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">My favorite color is purple.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="sh">''</span><span class="p">.</span><span class="nf">maketrans</span><span class="p">(</span><span class="sh">'</span><span class="s">abcdefghij</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">0123456789</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 创建转换表，也可以用 str.maketrans()
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">translate</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
<span class="sh">'</span><span class="s">My 50vor8t4 2olor 8s purpl4.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">table</span> <span class="o">=</span> <span class="nb">str</span><span class="p">.</span><span class="nf">maketrans</span><span class="p">(</span><span class="sh">'</span><span class="s">abcdefghij</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">0123456789</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">l</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">translate</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
<span class="sh">'</span><span class="s">My 50vor8t4 2oor 8s purp4.</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="修剪"><strong>修剪</strong></h4> <p><code class="language-plaintext highlighter-rouge">strip()</code>、<code class="language-plaintext highlighter-rouge">rstrip()</code>、<code class="language-plaintext highlighter-rouge">lstrip()</code> 用于删除字符串两端、右端和左端的连续的空白字符或指定字符。其参数所指定的字符并不视为整体，而是单独一个一个删除。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">  12345 </span><span class="se">\n\n</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
<span class="sh">'</span><span class="s">12345</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">aaahelloworlddddaa</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">helloworldddd</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="sh">'</span><span class="s">ad</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 删除 'a' 和 'd'
</span><span class="sh">'</span><span class="s">helloworl</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="判断">判断</h4> <p><code class="language-plaintext highlighter-rouge">startswith()</code>、<code class="language-plaintext highlighter-rouge">endswith()</code>用于判断字符串的前缀和后缀是否是指定的字符串，返回 True 或 False。</p> <p>参数：<code class="language-plaintext highlighter-rouge">s.startswith(prefix[, start[, end]]) -&gt; bool</code>、<code class="language-plaintext highlighter-rouge">s.endswith(suffix[, start[, end]]) -&gt; bool</code> <code class="language-plaintext highlighter-rouge">start</code> 和 <code class="language-plaintext highlighter-rouge">end</code> 参数用于指定字符串的检测范围。</p> <p><code class="language-plaintext highlighter-rouge">endswith()</code> 可接收字符串元组作为参数来判断文件的扩展名。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">os</span>
<span class="o">&gt;&gt;&gt;</span> <span class="p">[</span><span class="n">filename</span> <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="sh">'</span><span class="s">E:</span><span class="se">\\</span><span class="sh">'</span><span class="p">)</span> <span class="k">if</span> <span class="n">filename</span><span class="p">.</span><span class="nf">endswith</span><span class="p">((.</span><span class="n">png</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="n">jpg</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="n">gif</span><span class="sh">'</span><span class="s">))]
[</span><span class="sh">'</span><span class="n">logo</span><span class="p">.</span><span class="n">png</span><span class="sh">'</span><span class="s">]
</span></code></pre></div></div> <h4 id="检查">检查</h4> <p>通过运算符 <code class="language-plaintext highlighter-rouge">in</code> 可以判断一个字符串是否出现在另一个字符串中，返回 True 或 False。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="sh">'</span><span class="s">e</span><span class="sh">'</span> <span class="ow">in</span> <span class="sh">'</span><span class="s">Dreamless Drugs</span><span class="sh">'</span>
<span class="bp">True</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">isalnum()</code> 用于检查字符串中的所有字符是否都是字母或数字，返回 True 或 False。</p> <p><code class="language-plaintext highlighter-rouge">isalpha()</code> 用于检查字符串中的所有字符是否都是字母，返回 True 或 False。</p> <p><code class="language-plaintext highlighter-rouge">isdigit()</code> 用于检查字符串中的所有字符是否都是数字，返回 True 或 False。</p> <p><code class="language-plaintext highlighter-rouge">isdecimal()</code> 用于检查字符串中的所有字符是否都是十进制数字，返回 True 或 False。它比 <code class="language-plaintext highlighter-rouge">isdigit()</code> 更严格。</p> <p><code class="language-plaintext highlighter-rouge">isnumeric()</code> 用于检查字符串中的所有字符是否都是数字或用 Unicode 表示的数字，返回 True 或 False。</p> <p><code class="language-plaintext highlighter-rouge">isspace()</code> 用于检查字符串中的所有字符是否都是空白字符，返回 True 或 False。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="sh">"</span><span class="se">\t\n\r</span><span class="sh">"</span><span class="p">.</span><span class="nf">isspace</span><span class="p">()</span>
<span class="bp">True</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">isupper()</code> 、<code class="language-plaintext highlighter-rouge">islower()</code> 用于检查字符串中的所有字符是否都是大写、小写，返回 True 或 False。</p> <h4 id="排版">排版</h4> <p><code class="language-plaintext highlighter-rouge">center()</code>、<code class="language-plaintext highlighter-rouge">ljust()</code>、<code class="language-plaintext highlighter-rouge">rjust()</code> 返回指定宽度的新字符串，原字符串以居中、左对齐、右对齐的对齐方式出现在新字符串中。若指定的宽度大于原字符串长度，则用指定的字符填充。</p> <p>参数：<code class="language-plaintext highlighter-rouge">s.center(width[, fillchar]) -&gt; copy of s</code></p> <p><code class="language-plaintext highlighter-rouge">zfill()</code> 返回指定宽度的字符串，在左侧以字符 0 填充。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Dreamless Drugs</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="sh">'</span><span class="s">  Dreamless Drugs   </span><span class="sh">'</span>  <span class="c1"># 默认以空格填充
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">center</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="sh">'</span><span class="s">=</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">==Dreamless Drugs===</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">ljust</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="sh">'</span><span class="s">=</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">Dreamless Drugs=====</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">rjust</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="sh">'</span><span class="s">=</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">=====Dreamless Drugs</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="nf">zfill</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="sh">'</span><span class="s">00000Dreamless Drugs</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="切片-1">切片</h4> <p>字符串同样能使用切片功能，但仅限于读取其中的元素，不支持字符串修改。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Dreamless Drugs</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
<span class="sh">'</span><span class="s">Dream</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="输入转换">输入转换</h4> <p>用户通过 <code class="language-plaintext highlighter-rouge">input()</code> 的输入都为字符串类型，对于整数、实数和复数可以直接使用<code class="language-plaintext highlighter-rouge">int()</code>、<code class="language-plaintext highlighter-rouge">float()</code> 和 <code class="language-plaintext highlighter-rouge">complex()</code> 进行转换，而对于列表、元组等需要使用 <code class="language-plaintext highlighter-rouge">eval()</code> 进行转换而不能直接使用 <code class="language-plaintext highlighter-rouge">list()</code> 和 <code class="language-plaintext highlighter-rouge">tuple()</code>。为了检查用户输入的字符串是否是安全的，可以使用标准库 <code class="language-plaintext highlighter-rouge">ast</code> 中的安全函数 <code class="language-plaintext highlighter-rouge">literal_eval()</code>。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">input</span><span class="p">()</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="sh">'</span><span class="s">[1, 3, 5, 7, 9]</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">eval</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">ast</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">ast</span><span class="p">.</span><span class="nf">literal_eval</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 更推荐
</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">9</span><span class="p">]</span>
</code></pre></div></div> <h2 id="正则表达式">正则表达式</h2> <p>正则表达式（Regular Expression）可以使用预定义的模式去匹配一类具有共同特征的字符串，其功能通过标准库 <code class="language-plaintext highlighter-rouge">re</code> 提供。【<a href="https://docs.python.org/3/howto/regex.html?highlight=regular%20expression#regular-expression-howto">官方教程</a>】</p> <h3 id="正则表达式语法">正则表达式语法</h3> <table> <thead> <tr> <th style="text-align: left">元字符</th> <th style="text-align: left">说明</th> <th style="text-align: left">示例</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">.</code></td> <td style="text-align: left">默认模式下，匹配除换行符之外的任意单个字符</td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">[]</code></td> <td style="text-align: left">匹配位于 <code class="language-plaintext highlighter-rouge">[]</code> 中的任意一个字符</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">[a-z]</code> 匹配任意一个小写字母、<code class="language-plaintext highlighter-rouge">[0-5][0-9]</code> 匹配所有两位数 00 到 59</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">-</code></td> <td style="text-align: left">在 <code class="language-plaintext highlighter-rouge">[]</code> 之内用于表示范围</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">[a\-z]</code> 使用转义后可匹配字符 <code class="language-plaintext highlighter-rouge">-</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">^</code></td> <td style="text-align: left">匹配以 <code class="language-plaintext highlighter-rouge">^</code> 后面的字符串开头的字符串</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">^http</code> 只匹配以 <code class="language-plaintext highlighter-rouge">'http'</code> 开头的字符串</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">[^]</code></td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">^</code> 放在 <code class="language-plaintext highlighter-rouge">[]</code> 内表示反向字符集</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">[^xyz]</code> 匹配除了 <code class="language-plaintext highlighter-rouge">'x'</code>、<code class="language-plaintext highlighter-rouge">'y'</code> 和 <code class="language-plaintext highlighter-rouge">'z'</code> 之外的任何字符</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">$</code></td> <td style="text-align: left">匹配在换行符之前以 <code class="language-plaintext highlighter-rouge">$</code> 前面的字符串结束的字符串</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">foo.$</code> 在 <code class="language-plaintext highlighter-rouge">'foo1\n'</code> 中的匹配结果为 <code class="language-plaintext highlighter-rouge">'foo1'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">|</code></td> <td style="text-align: left">匹配位于 <code class="language-plaintext highlighter-rouge">|</code> 之前或之后的字符（正则表达式），可以用 <code class="language-plaintext highlighter-rouge">|</code> 分隔任意数量，匹配时将从左向右依次尝试，当完全匹配时后面的分支将不会被进一步测试</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">A|B|C|D</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">*</code></td> <td style="text-align: left">匹配位于 <code class="language-plaintext highlighter-rouge">*</code> 之前的单个字符或模式的 0 次或多次重复</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ca*t</code> 可以匹配 <code class="language-plaintext highlighter-rouge">'ct'</code>（0 次 <code class="language-plaintext highlighter-rouge">'a'</code>）、<code class="language-plaintext highlighter-rouge">'cat'</code>（1 次 <code class="language-plaintext highlighter-rouge">'a'</code>）和 <code class="language-plaintext highlighter-rouge">'caaat'</code>（3 次 <code class="language-plaintext highlighter-rouge">'a'</code>）等</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">+</code></td> <td style="text-align: left">匹配位于 <code class="language-plaintext highlighter-rouge">+</code> 之前的单个字符或模式的 1 次或多次重复</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ca+t</code> 不会匹配 <code class="language-plaintext highlighter-rouge">'ct'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">?</code></td> <td style="text-align: left">表示 <code class="language-plaintext highlighter-rouge">?</code> 之前的字符是可选的，即它可以出现 0 次或 1 次</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">ab?</code> 可以匹配 <code class="language-plaintext highlighter-rouge">'a'</code> 或 <code class="language-plaintext highlighter-rouge">'ab'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">*?</code>、<code class="language-plaintext highlighter-rouge">+?</code>、<code class="language-plaintext highlighter-rouge">??</code></td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">?</code> 在其他元字符之后表示非贪婪模式，即匹配尽可能少的字符串，而 <code class="language-plaintext highlighter-rouge">*</code>、<code class="language-plaintext highlighter-rouge">+</code>、<code class="language-plaintext highlighter-rouge">?</code> 都是匹配尽可能多的字符串</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">&lt;.*&gt;</code> 在 <code class="language-plaintext highlighter-rouge">'&lt;a&gt; b &lt;c&gt;'</code> 中将匹配整个字符串，而 <code class="language-plaintext highlighter-rouge">&lt;.*?&gt;</code> 将只匹配 <code class="language-plaintext highlighter-rouge">'&lt;a&gt;'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">{m}</code></td> <td style="text-align: left">指定 <code class="language-plaintext highlighter-rouge">{m}</code> 前一个字符的匹配次数</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">a{6}</code> 将恰好匹配 6 个 <code class="language-plaintext highlighter-rouge">'a'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">{m,n}</code></td> <td style="text-align: left">指定匹配 <code class="language-plaintext highlighter-rouge">{m,n}</code> 前一个字符 m 到 n 次，将尝试匹配尽可能多的重复，若省略 m 则指定下限为零，若省略 n 则指定无上限</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">a{4,}b</code> 将匹配 <code class="language-plaintext highlighter-rouge">'aaaab'</code> 以及在 <code class="language-plaintext highlighter-rouge">'b'</code> 前面有更多 <code class="language-plaintext highlighter-rouge">'a'</code> 的字符串，但不会匹配 <code class="language-plaintext highlighter-rouge">'aaab'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">{m,n}?</code></td> <td style="text-align: left">使 <code class="language-plaintext highlighter-rouge">{m,n}</code> 尝试匹配尽可能少的重复</td> <td style="text-align: left">对于字符串 <code class="language-plaintext highlighter-rouge">'aaaaaa'</code>，<code class="language-plaintext highlighter-rouge">a{3,5}</code> 将匹配 5 个 <code class="language-plaintext highlighter-rouge">'a'</code>，<code class="language-plaintext highlighter-rouge">a{3,5}?</code> 将匹配 3 个 <code class="language-plaintext highlighter-rouge">'a'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\</code></td> <td style="text-align: left">用于转义所有元字符，以及 <code class="language-plaintext highlighter-rouge">\</code> 后面可以跟各种字符来表示各种特殊序列</td> <td style="text-align: left">使用 <code class="language-plaintext highlighter-rouge">\\$</code> 来匹配 <code class="language-plaintext highlighter-rouge">'$'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\A</code></td> <td style="text-align: left">确保匹配将从字符串的开头位置开始</td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\b</code></td> <td style="text-align: left">表示单词边界，匹配单词头或单词尾</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">r'\bcat\b'</code> 只匹配包含单词 <code class="language-plaintext highlighter-rouge">'cat'</code> 的字符串，但不会匹配 <code class="language-plaintext highlighter-rouge">'concatenate'</code> 中的 <code class="language-plaintext highlighter-rouge">'cat'</code> 部分</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\B</code></td> <td style="text-align: left">与 <code class="language-plaintext highlighter-rouge">\b</code> 含义相反，表示非单词边界</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">r'\Bcat\B'</code> 会匹配 <code class="language-plaintext highlighter-rouge">'concatenate'</code> 中的 <code class="language-plaintext highlighter-rouge">'cat'</code> 部分，但不会匹配独立的单词 <code class="language-plaintext highlighter-rouge">'cat'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\d</code></td> <td style="text-align: left">匹配任何数字，相当于 <code class="language-plaintext highlighter-rouge">[0-9]</code></td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\d</code> 会在字符串 <code class="language-plaintext highlighter-rouge">'apple123'</code> 中匹配 <code class="language-plaintext highlighter-rouge">'1'</code>、<code class="language-plaintext highlighter-rouge">'2'</code> 和 <code class="language-plaintext highlighter-rouge">'3'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\D</code></td> <td style="text-align: left">与 <code class="language-plaintext highlighter-rouge">\d</code> 含义相反，相当于 <code class="language-plaintext highlighter-rouge">[^0-9]</code></td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\D</code> 会在字符串 <code class="language-plaintext highlighter-rouge">'apple123'</code> 中匹配 <code class="language-plaintext highlighter-rouge">'a'</code>、<code class="language-plaintext highlighter-rouge">'p'</code>、<code class="language-plaintext highlighter-rouge">'p'</code>、<code class="language-plaintext highlighter-rouge">'l'</code> 和 <code class="language-plaintext highlighter-rouge">'e'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\s</code></td> <td style="text-align: left">匹配任何空白字符，包括空格、制表符、换行符等，相当于 <code class="language-plaintext highlighter-rouge">[ \t\n\r\f\v]</code></td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\s</code> 会匹配字符串 <code class="language-plaintext highlighter-rouge">'Hello\tWorld\n'</code> 中的 <code class="language-plaintext highlighter-rouge">\t</code> 和 <code class="language-plaintext highlighter-rouge">\n</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\S</code></td> <td style="text-align: left">与 <code class="language-plaintext highlighter-rouge">\s</code> 含义相反，匹配任何非空白字符，相当于 <code class="language-plaintext highlighter-rouge">[^ \t\n\r\f\v]</code></td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\w</code></td> <td style="text-align: left">匹配任何字母、数字以及下划线，相当于 <code class="language-plaintext highlighter-rouge">[a-zA-Z0-9_]</code></td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\w+</code> 表示 <code class="language-plaintext highlighter-rouge">\w</code> 模式可以连续出现一次或多次</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\W</code></td> <td style="text-align: left">与 <code class="language-plaintext highlighter-rouge">\w</code> 含义相反，相当于 <code class="language-plaintext highlighter-rouge">[^a-zA-Z0-9_]</code></td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\Z</code></td> <td style="text-align: left">确保匹配将从字符串的末尾位置开始</td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\number</code></td> <td style="text-align: left">引用相同编号组（<code class="language-plaintext highlighter-rouge">()</code>）中的内容，<code class="language-plaintext highlighter-rouge">number</code> 为正整数</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(\w+)\s+\1</code> 可以匹配任何两个相同的连续单词， <code class="language-plaintext highlighter-rouge">\1</code> 表示引用第一个子模式 <code class="language-plaintext highlighter-rouge">(\w+)</code> 中的内容，即 <code class="language-plaintext highlighter-rouge">(\w+)</code> 可以匹配一个单词，<code class="language-plaintext highlighter-rouge">\1</code> 同 <code class="language-plaintext highlighter-rouge">(\w+)</code> 也可以匹配一个相同的单词</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">\n</code>、<code class="language-plaintext highlighter-rouge">\f</code>、<code class="language-plaintext highlighter-rouge">\r</code>、<code class="language-plaintext highlighter-rouge">\t</code></td> <td style="text-align: left">也支持字符串的标准转义字符，分别匹配一个换行符、换页符、回车符、制表符</td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">()</code></td> <td style="text-align: left">表示一个子模式（组），圆括号中的内容作为一个整体对待，可以使用 <code class="language-plaintext highlighter-rouge">\number</code> 进行匹配</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(cat)+</code> 可以匹配 <code class="language-plaintext highlighter-rouge">'catcat'</code>、<code class="language-plaintext highlighter-rouge">'catcatcat'</code> 等一个或多个连续 <code class="language-plaintext highlighter-rouge">'cat'</code> 的情况</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?:...)</code></td> <td style="text-align: left">表示非捕获组，即匹配圆括号中的正则表达式但不捕获</td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?#...)</code></td> <td style="text-align: left">一般位于正则表达式最后来表示注释，从而允许在正则表达式内部添加注释，不会被返回</td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?=...)</code></td> <td style="text-align: left">用于想要匹配的正则表达式之后，如果 <code class="language-plaintext highlighter-rouge">=</code> 后的内容在字符串中紧跟着出现则匹配，但并不返回 <code class="language-plaintext highlighter-rouge">=</code> 之后的内容</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">abc(?=def)</code> 在字符串 <code class="language-plaintext highlighter-rouge">'abcdef'</code> 中匹配并返回 <code class="language-plaintext highlighter-rouge">'abc'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?&lt;=...)</code></td> <td style="text-align: left">用于想要匹配的正则表达式之前，如果 <code class="language-plaintext highlighter-rouge">&lt;=</code> 后的内容在字符串中紧跟着出现则匹配，但并不返回 <code class="language-plaintext highlighter-rouge">&lt;=</code> 之后的内容</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?&lt;=abc)def</code> 在字符串 <code class="language-plaintext highlighter-rouge">'abcdef'</code> 中匹配并返回 <code class="language-plaintext highlighter-rouge">'def'</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?!...)</code></td> <td style="text-align: left">用于想要匹配的正则表达式之后，如果 <code class="language-plaintext highlighter-rouge">!</code> 后的内容在字符串中<strong>不</strong>紧跟着出现则匹配，但并不返回 <code class="language-plaintext highlighter-rouge">！</code> 之后的内容</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">abc(?!def)</code> 只有在字符串 <code class="language-plaintext highlighter-rouge">'abc'</code> 之后没有 <code class="language-plaintext highlighter-rouge">'def'</code> 时才会匹配</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?&lt;!...)</code></td> <td style="text-align: left">用于想要匹配的正则表达式之前，如果 <code class="language-plaintext highlighter-rouge">!=</code> 后的内容在字符串中<strong>不</strong>紧跟着出现则匹配，但并不返回 <code class="language-plaintext highlighter-rouge">!=</code> 之后的内容</td> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?!=abc)def</code> 只有在字符串 <code class="language-plaintext highlighter-rouge">'def'</code> 之前没有 <code class="language-plaintext highlighter-rouge">'abc'</code> 时才会匹配</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?P&lt;name&gt;)</code></td> <td style="text-align: left">为组命名</td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?P=name)</code></td> <td style="text-align: left">匹配之前命名为 name 的组所匹配的任何字符串</td> <td style="text-align: left"> </td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">(?aiLmsux)</code></td> <td style="text-align: left">设置匹配标志，可以是单个字母，也可以是多个字母的组合，每个字母的含义与<a href="#编译标志">编译标志</a>相同</td> <td style="text-align: left"> </td> </tr> </tbody> </table> <p class="note">元字符在 <code class="language-plaintext highlighter-rouge">[]</code> 不起作用，只是表示普通的字符，如 <code class="language-plaintext highlighter-rouge">[ak$]</code> 会匹配<code class="language-plaintext highlighter-rouge">'a'</code>、<code class="language-plaintext highlighter-rouge">'k'</code> 和 <code class="language-plaintext highlighter-rouge">'$'</code>，<code class="language-plaintext highlighter-rouge">$</code> 通常是一个元字符，但在 <code class="language-plaintext highlighter-rouge">[]</code> 中它被剥夺了它的特殊性质。</p> <p class="note-1">为什么使用 <code class="language-plaintext highlighter-rouge">\\\\</code> 来匹配 <code class="language-plaintext highlighter-rouge">'\'</code>：在 Python 字符串中，反斜杠是一个转义字符，为了在字符串中表示一个字面的反斜杠，需要使用 <code class="language-plaintext highlighter-rouge">\\</code>。在正则表达式中，反斜杠也是一个转义字符，为了在正则表达式中匹配一个字面的反斜杠，也需要使用 <code class="language-plaintext highlighter-rouge">\\</code>。因此，为了在 Python 字符串中表示一个正则表达式，该正则表达式可以匹配一个字面的反斜杠，则需要使用 <code class="language-plaintext highlighter-rouge">\\\\</code>，当然也可以使用原始字符串 <code class="language-plaintext highlighter-rouge">r'\\'</code>。</p> <h3 id="正则表达式模块-re">正则表达式模块 <code class="language-plaintext highlighter-rouge">re</code></h3> <p>Python 标准库 <code class="language-plaintext highlighter-rouge">re</code> 提供了正则表达式操作所需要的功能，既可以直接使用其中的函数处理字符串，也可以使用编译后的正则表达式对象处理字符串。</p> <h4 id="编译标志">编译标志</h4> <p>编译标志（flags）会影响正则表达式的匹配行为。</p> <table> <thead> <tr> <th style="text-align: left">flags</th> <th style="text-align: left">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">re.ASCII</code> or <code class="language-plaintext highlighter-rouge">re.A</code></td> <td style="text-align: left">表示 <code class="language-plaintext highlighter-rouge">\b</code>、<code class="language-plaintext highlighter-rouge">\d</code>、<code class="language-plaintext highlighter-rouge">\s</code> 和 <code class="language-plaintext highlighter-rouge">\w</code> 将只匹配 ASCII 字符，而不是整个 Unicode 字符集</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">re.IGNORECASE</code> or <code class="language-plaintext highlighter-rouge">re.I</code></td> <td style="text-align: left">令匹配对大小写不敏感</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">re.LOCALE</code> or <code class="language-plaintext highlighter-rouge">re.L</code></td> <td style="text-align: left">支持本地字符集的字符（不常用）</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">re.MULTILINE</code> or <code class="language-plaintext highlighter-rouge">re.M</code></td> <td style="text-align: left">多行匹配模式，可以使 <code class="language-plaintext highlighter-rouge">^</code> 和 <code class="language-plaintext highlighter-rouge">$</code> 能够匹配字符串中每一行的开头和结尾</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">re.DOTALL</code> or <code class="language-plaintext highlighter-rouge">re.S</code></td> <td style="text-align: left">使 <code class="language-plaintext highlighter-rouge">.</code> 能够匹配任何字符，包括换行符</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">re.UNICODE</code> or <code class="language-plaintext highlighter-rouge">re.U</code></td> <td style="text-align: left">匹配 Unicode 字符集（默认标志）</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">re.VERBOSE</code> or <code class="language-plaintext highlighter-rouge">re.X</code></td> <td style="text-align: left">允许在正则表达式中加入空白字符和注释</td> </tr> </tbody> </table> <h4 id="常用函数">常用函数</h4> <ul> <li><code class="language-plaintext highlighter-rouge">re.search(pattern, string, flags=0)</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">pattern</code> 参数指正则表达式，可用原始字符串防止转义，<code class="language-plaintext highlighter-rouge">string</code> 参数指用于匹配的字符串，<code class="language-plaintext highlighter-rouge">flags</code> 参数的值可以是上述的各个编译标志。<code class="language-plaintext highlighter-rouge">search()</code> 函数用于在整个字符串中搜索正则表达式的首个匹配项，如果匹配成功就返回 Match 对象，否则返回 <code class="language-plaintext highlighter-rouge">None</code>。返回的 Match 对象可以用 <code class="language-plaintext highlighter-rouge">group()</code> 方法查看内容。</p> <ul> <li><code class="language-plaintext highlighter-rouge">re.match(pattern, string, flags=0)</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">match()</code> 函数从字符串的开始处进行匹配，如果匹配成功就返回 Match 对象，否则返回 <code class="language-plaintext highlighter-rouge">None</code>。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">hello</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Say hello!</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># search() 在整个字符串中匹配
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">text</span><span class="p">.</span><span class="nf">group</span><span class="p">()</span>
<span class="sh">'</span><span class="s">hello</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">hello</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Say hello!</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># match() 从字符串的开头匹配，匹配失败
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">text</span><span class="p">.</span><span class="nf">group</span><span class="p">()</span>
<span class="nb">AttributeError</span><span class="p">:</span> <span class="sh">'</span><span class="s">NoneType</span><span class="sh">'</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="sh">'</span><span class="s">group</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">hello</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">hello Say hello!</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># match() 匹配成功
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">text</span><span class="p">.</span><span class="nf">group</span><span class="p">()</span>
<span class="sh">'</span><span class="s">hello</span><span class="sh">'</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">re.fullmatch(pattern, string, flags=0)</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">fullmatch()</code> 只在正则表达式匹配整个字符串时才返回 Match 对象，否则返回 <code class="language-plaintext highlighter-rouge">None</code>。因此，可以用于确保整个字符串都符合特定的格式。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">fullmatch</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\d+</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">12345</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 确保整个字符串都由数字 [0-9] 构成
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">if</span> <span class="n">text</span><span class="p">:</span>
	<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The string is made of digits.</span><span class="sh">'</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
	<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The string has non-digit characters.</span><span class="sh">'</span><span class="p">)</span>
<span class="n">The</span> <span class="n">string</span> <span class="ow">is</span> <span class="n">made</span> <span class="n">of</span> <span class="n">digits</span><span class="p">.</span>
</code></pre></div></div> <ul> <li><span id="re-split"><code class="language-plaintext highlighter-rouge">re.split(pattern, string, maxsplit=0, flags=0)</code></span></li> </ul> <p><code class="language-plaintext highlighter-rouge">split()</code> 根据正则表达式的匹配项来分隔字符串，返回一个列表。<code class="language-plaintext highlighter-rouge">maxsplit</code> 参数指定字符串的最大分隔次数，并且字符串的其余部分作为列表的最终元素返回。如果在 <code class="language-plaintext highlighter-rouge">pattern</code> 中使用元字符 <code class="language-plaintext highlighter-rouge">()</code>（捕获组），那么分隔符也会作为结果返回，并且分隔符如果在字符串的开头或结尾得到匹配，那么结果则会以空字符串开头或结尾。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\W+</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Words, words, ws.</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 最后一个匹配项是 '.'，但是在 '.' 之后字符串没有内容，因此返回的最后一项为空字符串
</span><span class="p">[</span><span class="sh">'</span><span class="s">Words</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">words</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ws</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(\W+)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Words, words, ws.</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 正则表达式使用了 ()，分隔符也被返回
</span><span class="p">[</span><span class="sh">'</span><span class="s">Words</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">words</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ws</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\W+</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Words, words, ws.</span><span class="sh">'</span><span class="p">,</span> <span class="n">maxsplit</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># 指定最大分隔次数为 1，字符串的剩余部分以一个整体作为最后一项返回
</span><span class="p">[</span><span class="sh">'</span><span class="s">Words</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">words, ws.</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div> <ul> <li><span id="re-findall"><code class="language-plaintext highlighter-rouge">re.findall(pattern, string, flags=0)</code></span></li> </ul> <p><code class="language-plaintext highlighter-rouge">findall()</code> 以列表的形式按照匹配的顺序返回字符串中的所有匹配项。相对于 <code class="language-plaintext highlighter-rouge">search()</code> 只返回第一个匹配项，<code class="language-plaintext highlighter-rouge">findall()</code> 则会返回所有匹配项。如果 <code class="language-plaintext highlighter-rouge">pattern</code> 中有一个或多个捕获组，则会返回一个元组列表。如果没有匹配，则会返回一个空列表。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Emails: example1@gmail.com, example2@163.com</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(\w+)@(\w+)\.(\w+)</span><span class="sh">'</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>  <span class="c1"># 多个捕获组，返回元组列表
</span><span class="p">[(</span><span class="sh">'</span><span class="s">example1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">gmail</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">com</span><span class="sh">'</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">example2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">163</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">com</span><span class="sh">'</span><span class="p">)]</span>
</code></pre></div></div> <ul> <li><span id="re-finditer"><code class="language-plaintext highlighter-rouge">re.finditer(pattern, string, flags=0)</code></span></li> </ul> <p><code class="language-plaintext highlighter-rouge">finditer()</code> 返回包含所有匹配项的迭代器，而不是由字符串组成的列表，其中每个匹配项都是 <a href="#match-对象">Match 对象</a>。相比于 <code class="language-plaintext highlighter-rouge">findall()</code>，<code class="language-plaintext highlighter-rouge">finditer()</code> 可以对得到的匹配项使用更全面的功能。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="sh">'</span><span class="s">The rain in Spain falls mainly in the plain.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">matches</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">finditer</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\b\w+ain\b</span><span class="sh">'</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">match</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>  <span class="c1"># 获取每个匹配项的内容
</span>	<span class="nf">print</span><span class="p">(</span><span class="n">match</span><span class="p">.</span><span class="nf">group</span><span class="p">(),</span> <span class="n">end</span><span class="o">=</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
<span class="n">rain</span> <span class="n">Spain</span> <span class="n">plain</span> 

<span class="c1"># 注意！迭代器 matches 的元素只能访问一次
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">match</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>  <span class="c1"># 获取每个匹配项的起始和结束位置
</span>	<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">Match: </span><span class="si">{</span><span class="n">match</span><span class="p">.</span><span class="nf">group</span><span class="p">()</span><span class="si">}</span><span class="s">, Start: </span><span class="si">{</span><span class="n">match</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span><span class="si">}</span><span class="s">, End: </span><span class="si">{</span><span class="n">match</span><span class="p">.</span><span class="nf">end</span><span class="p">()</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>
<span class="n">Match</span><span class="p">:</span> <span class="n">rain</span><span class="p">,</span> <span class="n">Start</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="n">End</span><span class="p">:</span> <span class="mi">8</span>
<span class="n">Match</span><span class="p">:</span> <span class="n">Spain</span><span class="p">,</span> <span class="n">Start</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="n">End</span><span class="p">:</span> <span class="mi">17</span>
<span class="n">Match</span><span class="p">:</span> <span class="n">plain</span><span class="p">,</span> <span class="n">Start</span><span class="p">:</span> <span class="mi">38</span><span class="p">,</span> <span class="n">End</span><span class="p">:</span> <span class="mi">43</span>
</code></pre></div></div> <ul> <li><span id="re-sub"><code class="language-plaintext highlighter-rouge">re.sub(pattern, repl, string, count=0, flags=0)</code></span></li> </ul> <p><code class="language-plaintext highlighter-rouge">sub()</code> 使用 <code class="language-plaintext highlighter-rouge">repl</code> 替换字符串中的所有匹配项，返回新字符串，如果没有匹配则返回原字符串。<code class="language-plaintext highlighter-rouge">repl</code> 参数可以是字符串或返回字符串的可调用对象（例如函数），该可调用对象作用于每个匹配的 Match 对象。<code class="language-plaintext highlighter-rouge">count</code> 参数表示替换的最大次数，默认为 0，即替换所有的匹配项。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">clouds</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Dreamless drugs are the best drugs ever.</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span>
<span class="sh">'</span><span class="s">Dreamless clouds are the best clouds ever.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">clouds</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Dreamless drugs are the best drugs ever.</span><span class="sh">'</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># 指定最大替换次数
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">text</span>
<span class="sh">'</span><span class="s">Dreamless clouds are the best drugs ever.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">upper_func</span><span class="p">(</span><span class="n">match</span><span class="p">):</span>  <span class="c1"># 接收匹配的 Match 对象为参数
</span>	<span class="k">return</span> <span class="n">match</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">upper</span><span class="p">()</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\b[a-z]+\b</span><span class="sh">'</span><span class="p">,</span> <span class="n">upper_func</span><span class="p">,</span> <span class="sh">'</span><span class="s">hello world</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># repl 为函数
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">text</span>
<span class="sh">'</span><span class="s">HELLO WORLD</span><span class="sh">'</span>
</code></pre></div></div> <ul> <li><span id="re-subn"><code class="language-plaintext highlighter-rouge">re.subn(pattern, repl, string, count=0, flags=0)</code></span></li> </ul> <p><code class="language-plaintext highlighter-rouge">subn()</code> 执行与 <code class="language-plaintext highlighter-rouge">sub()</code> 相同的操作，只不过返回的是一个元组，包括新字符串和替换次数。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">subn</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">clouds</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Dreamless drugs are the best drugs ever.</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span>
<span class="p">(</span><span class="sh">'</span><span class="s">Dreamless clouds are the best clouds ever.</span><span class="sh">'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">re.escape(pattern)</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">escape()</code> 用于将字符串中所有特殊的正则表达式字符转义成普通字符，可以用于处理用户输入的数据，因为不知道输入的字符串中可能包含哪些特殊字符。主要目的是让一个字符串在任何正则表达式中都能被当作字面量（即不具有特殊含义）来看待。例如，有一个包含 <code class="language-plaintext highlighter-rouge">.*?</code> 这三种特殊字符的字符串，若想在文本中查找这个确切的字符串，而不是它作为正则表达式所代表的 <code class="language-plaintext highlighter-rouge">pattern</code>，就可以使用 <code class="language-plaintext highlighter-rouge">escape()</code> 来正确转义后再进行匹配。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="sh">'</span><span class="s">http://www.python.org</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">http://www</span><span class="se">\\</span><span class="s">.python</span><span class="se">\\</span><span class="s">.org</span><span class="sh">'</span>  <span class="c1"># 双反斜杠 \\ 表示一个字面的反斜杠 \，然后 \. 表示字面的 .，因此 \\. 才能匹配 .
</span></code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">re.compile(pattern, flags=0)</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">compile()</code> 用于将正则表达式 <code class="language-plaintext highlighter-rouge">pattern</code> 编译为<strong>正则表达式对象</strong>，便于表达式在单个程序中的多次使用。</p> <h3 id="正则表达式对象">正则表达式对象</h3> <p>通过 <code class="language-plaintext highlighter-rouge">compile()</code> 函数将正则表达式 <code class="language-plaintext highlighter-rouge">pattern</code> 编译成正则表达式对象后，可以使用更多的方法来处理字符串。</p> <h4 id="searchmatchfullmatchfindallfinditer"><code class="language-plaintext highlighter-rouge">search()</code>、<code class="language-plaintext highlighter-rouge">match()</code>、<code class="language-plaintext highlighter-rouge">fullmatch()</code>、<code class="language-plaintext highlighter-rouge">findall()</code>、<code class="language-plaintext highlighter-rouge">finditer()</code></h4> <ul> <li><code class="language-plaintext highlighter-rouge">Pattern.search(string[, pos[, endpos]]</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">search()</code> 用于在整个字符串或指定范围中进行搜索，返回第一个匹配的 Match 对象，若没有匹配则返回 <code class="language-plaintext highlighter-rouge">None</code>。<code class="language-plaintext highlighter-rouge">pos</code> 参数给出开始搜索的索引，默认为 0。<code class="language-plaintext highlighter-rouge">endpos</code> 参数限制字符串的搜索范围。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Dreamless drugs are the best drugs ever.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">re</span><span class="p">.</span><span class="n">Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="n">match</span><span class="o">=</span><span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>  <span class="c1"># 设定搜索从 20 开始
</span><span class="o">&lt;</span><span class="n">re</span><span class="p">.</span><span class="n">Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">29</span><span class="p">,</span> <span class="mi">34</span><span class="p">),</span> <span class="n">match</span><span class="o">=</span><span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="o">&gt;</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">Pattern.match(string[, pos[, endpos]]</code></li> </ul> <p><code class="language-plaintext highlighter-rouge">match()</code> 从字符串开头或指定位置进行搜索，且必须以模式开头，才会返回 Match 对象，其余同 <code class="language-plaintext highlighter-rouge">search()</code>。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">text</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Dreamless drugs are the best drugs ever.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>  <span class="c1"># 无匹配返回 None
</span><span class="bp">None</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">p</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
<span class="o">&lt;</span><span class="n">re</span><span class="p">.</span><span class="n">Match</span> <span class="nb">object</span><span class="p">;</span> <span class="n">span</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="n">match</span><span class="o">=</span><span class="sh">'</span><span class="s">drugs</span><span class="sh">'</span><span class="o">&gt;</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">Pattern.fullmatch(string[, pos[, endpos]]</code></li> </ul> <p>如果整个字符串与该正则表达式匹配，则返回相应的 Match 对象。</p> <ul> <li><code class="language-plaintext highlighter-rouge">Pattern.findall(string[, pos[, endpos]]</code>、<code class="language-plaintext highlighter-rouge">Pattern.finditer(string[, pos[, endpos]]</code></li> </ul> <p>同 <a href="#re-findall"><code class="language-plaintext highlighter-rouge">re.findall()</code></a> 和 <a href="#re-finditer"><code class="language-plaintext highlighter-rouge">re.finditer()</code></a>，只是增加了 <code class="language-plaintext highlighter-rouge">pos</code> 和 <code class="language-plaintext highlighter-rouge">endpos</code> 参数。</p> <h4 id="split"><code class="language-plaintext highlighter-rouge">split()</code></h4> <p><code class="language-plaintext highlighter-rouge">Pattern.split(string, maxsplit=0)</code> 同 <a href="#re-split"><code class="language-plaintext highlighter-rouge">re.split()</code></a>。</p> <h4 id="subsubn"><code class="language-plaintext highlighter-rouge">sub()</code>、<code class="language-plaintext highlighter-rouge">subn()</code></h4> <p><code class="language-plaintext highlighter-rouge">Pattern.sub(repl, string, count=0)</code> 和 <code class="language-plaintext highlighter-rouge">Pattern.subn(repl, string, count=0)</code> 同 <a href="#re-sub"><code class="language-plaintext highlighter-rouge">re.sub()</code></a> 和 <a href="#re-subn"><code class="language-plaintext highlighter-rouge">re.subn()</code></a>。</p> <h4 id="groupspattern-属性"><code class="language-plaintext highlighter-rouge">groups</code>、<code class="language-plaintext highlighter-rouge">pattern</code> 属性</h4> <p><code class="language-plaintext highlighter-rouge">Pattern.groups</code> 返回捕获组的数量，<code class="language-plaintext highlighter-rouge">Pattern.pattern</code> 返回编译后正则表达式对象的模式字符串。</p> <h3 id="match-对象">Match 对象</h3> <h4 id="groupgroupsgroupdict"><code class="language-plaintext highlighter-rouge">group()</code>、<code class="language-plaintext highlighter-rouge">groups()</code>、<code class="language-plaintext highlighter-rouge">groupdict()</code></h4> <p><code class="language-plaintext highlighter-rouge">Match.group([group1, ...])</code> 返回匹配的一个或多个子模式内容，<code class="language-plaintext highlighter-rouge">group1</code> 默认为 0（返回整个模式内容）；<code class="language-plaintext highlighter-rouge">Match.groups()</code> 返回一个包含所有匹配的子模式内容的元组；<code class="language-plaintext highlighter-rouge">Match.groupdict()</code> 返回一个包含所有匹配的命名的子模式内容的字典。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(\w+) (\w+)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Dreamless Drugs, harmless</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">()</span>  <span class="c1"># 返回整个模式内容
</span><span class="sh">'</span><span class="s">Dreamless Drugs</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># 返回第一个子模式内容
</span><span class="sh">'</span><span class="s">Dreamless</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 返回第二个子模式内容
</span><span class="sh">'</span><span class="s">Drugs</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1"># 以元组形式返回指定的多个子模式内容
</span><span class="p">(</span><span class="sh">'</span><span class="s">Dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Drugs</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">groups</span><span class="p">()</span>  <span class="c1"># 以元组形式返回所有匹配的子模式内容
</span><span class="p">(</span><span class="sh">'</span><span class="s">Dreamless</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Drugs</span><span class="sh">'</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Melanie C</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="sh">'</span><span class="s">first_name</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 使用命名的子模式
</span><span class="sh">'</span><span class="s">Melanie</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="sh">'</span><span class="s">last_name</span><span class="sh">'</span><span class="p">)</span>
<span class="sh">'</span><span class="s">C</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">groupdict</span><span class="p">()</span>
<span class="p">{</span><span class="sh">'</span><span class="s">first_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Melanie</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">last_name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">C</span><span class="sh">'</span><span class="p">}</span>
</code></pre></div></div> <h4 id="startendspan"><code class="language-plaintext highlighter-rouge">start()</code>、<code class="language-plaintext highlighter-rouge">end()</code>、<code class="language-plaintext highlighter-rouge">span()</code></h4> <p><code class="language-plaintext highlighter-rouge">Match.start([group])</code> 和 <code class="language-plaintext highlighter-rouge">Match.end([group])</code> 返回匹配的子字符串的起始位置和结束位置后一位的索引。<code class="language-plaintext highlighter-rouge">group</code> 参数用于指定第几个捕获组，默认为 0，表示整个匹配的子字符串。<code class="language-plaintext highlighter-rouge">Match.span([group])</code> 返回一个包含 <code class="language-plaintext highlighter-rouge">start()</code> 和 <code class="language-plaintext highlighter-rouge">end()</code> 的元组。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(\w+) (\w+)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Dreamless Drugs, harmless</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">start</span><span class="p">()</span>
<span class="mi">0</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">end</span><span class="p">()</span>
<span class="mi">15</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">span</span><span class="p">()</span>  <span class="c1"># 整个匹配的子字符串
</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">span</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># 第一个捕获组匹配的子字符串
</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">span</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 第二个捕获组匹配的子字符串
</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">15</span><span class="p">)</span>
</code></pre></div></div> <h4 id="expand"><code class="language-plaintext highlighter-rouge">expand()</code></h4> <p><code class="language-plaintext highlighter-rouge">Match.expand(template)</code> 用于通过一个模板字符串进行正则表达式的替换操作，其中该模板字符串可以包含正则表达式的捕获组，捕获组可以用 <code class="language-plaintext highlighter-rouge">\number</code> 或捕获组名（<code class="language-plaintext highlighter-rouge">\g&lt;name&gt;</code>）的方式进行引用。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(\w+) (\w+)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Dreamless Drugs, harmless</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">()</span>  <span class="c1"># 查看匹配结果
</span><span class="sh">'</span><span class="s">Dreamless Drugs</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">expand</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\2 \1</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 使用 \number 引用捕获组进行替换
</span><span class="sh">'</span><span class="s">Drugs Dreamless</span><span class="sh">'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">(?P&lt;first_name&gt;\w+) (?P&lt;last_name&gt;\w+)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Melanie C</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">()</span>  <span class="c1"># 查看匹配结果
</span><span class="sh">'</span><span class="s">Melanie C</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">expand</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\g&lt;last_name&gt; \g&lt;first_name&gt;</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 使用捕获组名来引用捕获组进行替换
</span><span class="sh">'</span><span class="s">C Melanie</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="lastindexlastgrouprestring-属性"><code class="language-plaintext highlighter-rouge">lastindex</code>、<code class="language-plaintext highlighter-rouge">lastgroup</code>、<code class="language-plaintext highlighter-rouge">re</code>、<code class="language-plaintext highlighter-rouge">string</code> 属性</h4> <p><code class="language-plaintext highlighter-rouge">Match.lastindex</code> 返回最后匹配的捕获组的索引，若无匹配则为 <code class="language-plaintext highlighter-rouge">None</code>；<code class="language-plaintext highlighter-rouge">Match.lastgroup</code> 返回最后匹配的捕获组的名称；<code class="language-plaintext highlighter-rouge">Match.re</code> 返回生成此 Match 对象的正则表达式对象，从而可得到<code class="language-plaintext highlighter-rouge">pattern</code>；<code class="language-plaintext highlighter-rouge">Match.string</code> 返回传递给生成此 Match 对象的正则表达式对象的字符串。</p> <h2 id="程序控制结构">程序控制结构</h2> <p>在程序控制结构中，都要根据条件表达式的值来确定下一步的执行流程。条件表达式的值只要不是 False、0、空值 None、空列表、空元组、空字典、空集合、空字符串等其他空可迭代对象，Python 均认为与 True 等价。</p> <h3 id="选择结构">选择结构</h3> <h4 id="单分支选择结构">单分支选择结构</h4> <p>当表达式的值为 True 或其他与 True 等价的值时，表示条件满足，语句块被执行。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">expression</span><span class="p">:</span>
	<span class="c1"># 语句块
</span></code></pre></div></div> <h4 id="双分支选择结构">双分支选择结构</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">expression</span><span class="p">:</span>
	<span class="c1"># 语句块 1
</span><span class="k">else</span><span class="p">:</span>
	<span class="c1"># 语句块 2
</span></code></pre></div></div> <p><strong>三元运算符</strong>构成的表达式也属于双分支选择结构，其语法为：<code class="language-plaintext highlighter-rouge">value1 if condition else value2</code>。当条件表达式 <code class="language-plaintext highlighter-rouge">condition</code> 的值与 True 等价时，表达式的值为 <code class="language-plaintext highlighter-rouge">value1</code>，否则表达式的值为 <code class="language-plaintext highlighter-rouge">value2</code>。<code class="language-plaintext highlighter-rouge">value1</code> 和 <code class="language-plaintext highlighter-rouge">value2</code> 本身也可以是复杂表达式，也可以包含函数调用，甚至是三元运算符构成的表达式。此外，三元运算符构成的表达式也具有惰性求值的特点。</p> <h4 id="多分支选择结构">多分支选择结构</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">expression1</span><span class="p">:</span>
	<span class="c1"># 语句块 1
</span><span class="k">elif</span> <span class="n">expression2</span><span class="p">:</span>
	<span class="c1"># 语句块 2
</span><span class="k">elif</span> <span class="n">expression3</span><span class="p">:</span>
	<span class="c1"># 语句块 3
</span><span class="k">else</span><span class="p">:</span>
	<span class="c1"># 语句块 n
</span></code></pre></div></div> <h4 id="选择结构的嵌套">选择结构的嵌套</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">expression1</span><span class="p">:</span>
	<span class="c1"># 语句块 1
</span>	<span class="k">if</span> <span class="n">expression2</span><span class="p">:</span>
		<span class="c1"># 语句块 2
</span>	<span class="k">else</span><span class="p">:</span>
		<span class="c1"># 语句块 3
</span><span class="k">else</span><span class="p">:</span>
	<span class="k">if</span> <span class="n">expression4</span><span class="p">:</span>
		<span class="c1"># 语句块 4
</span></code></pre></div></div> <h3 id="循环结构">循环结构</h3> <h4 id="for-循环与-while-循环"><code class="language-plaintext highlighter-rouge">for</code> 循环与 <code class="language-plaintext highlighter-rouge">while</code> 循环</h4> <p><code class="language-plaintext highlighter-rouge">for</code> 循环一般用于循环次数可以提前确定的情况，尤其适用于<strong>枚举</strong>或<strong>遍历</strong>可迭代对象中元素的场合。<code class="language-plaintext highlighter-rouge">while</code> 循环一般用于根据一定的条件重复执行一段代码的情况，并且往往难以提前确定循环次数。对于带有 <code class="language-plaintext highlighter-rouge">else</code> 子句的循环结构，如果循环因为条件表达式不成立或序列遍历结束而<strong>自然结束</strong>时则执行 <code class="language-plaintext highlighter-rouge">else</code> 中的语句，如果循环是因为执行了 <code class="language-plaintext highlighter-rouge">break</code> 语句而导致循环<strong>提前结束</strong>则不会执行 <code class="language-plaintext highlighter-rouge">else</code> 中的语句。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># for 循环
</span><span class="k">for</span> <span class="n">variable</span> <span class="ow">in</span> <span class="n">sequence</span><span class="p">:</span>
	<span class="c1"># 循环体
</span><span class="p">[</span><span class="k">else</span><span class="p">:</span>
	<span class="c1"># 代码块]
</span>	
<span class="c1"># while 循环
</span><span class="k">while</span> <span class="n">condition</span><span class="p">:</span>
	<span class="c1"># 循环体
</span><span class="p">[</span><span class="k">else</span><span class="p">:</span>
	<span class="c1"># 代码块]
</span></code></pre></div></div> <p class="note">使用 <code class="language-plaintext highlighter-rouge">while True:</code> 可以构建一个无限循环。</p> <h4 id="break-与-continue-语句"><code class="language-plaintext highlighter-rouge">break</code> 与 <code class="language-plaintext highlighter-rouge">continue</code> 语句</h4> <p><code class="language-plaintext highlighter-rouge">break</code> 与 <code class="language-plaintext highlighter-rouge">continue</code> 语句一般常与<strong>选择结构</strong>或<strong>异常处理结构</strong>结合使用。<code class="language-plaintext highlighter-rouge">break</code> 语句被执行会使得<strong>所属层次的循环</strong>提前结束，即完全跳出当前循环，不再执行剩余的迭代。<code class="language-plaintext highlighter-rouge">continue</code> 语句被执行会使得<strong>本次循环</strong>提前结束，忽略 <code class="language-plaintext highlighter-rouge">continue</code> 之后的语句，提前进入下一次循环。<code class="language-plaintext highlighter-rouge">break</code> 与 <code class="language-plaintext highlighter-rouge">continue</code> 语句都只对最内层的循环有效。</p> <h4 id="循环优化技巧">循环优化技巧</h4> <p class="important">在多重循环嵌套的情况下，要尽量减少内层循环中不必要的计算，尽可能地将计算向外提。</p> <p class="important">在使用模块中的方法时，可以通过将其转换为局部变量来提高运行速度。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">math</span>  <span class="c1"># 或者使用 from math import sin[ as loc_sin]，效果一样
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">):</span>
	<span class="n">math</span><span class="p">.</span><span class="nf">sin</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
	
<span class="n">loc_sin</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">sin</span>  <span class="c1"># 将 math.sin 转换为局部变量
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1000000</span><span class="p">):</span>
	<span class="nf">loc_sin</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</code></pre></div></div> <p class="note-1">如果需要测试一个序列是否包含一个元素应尽量使用字典或集合，将多个字符串连接成一个字符串时应尽量使用 <code class="language-plaintext highlighter-rouge">join()</code> 方法而不是运算符 <code class="language-plaintext highlighter-rouge">+</code>，对列表进行元素的插入和删除应尽量从尾部进行。最终的最终，首先应将代码写对，保证完全符合功能要求，再进行必要的优化来提高性能。</p> <h2 id="异常处理结构">异常处理结构</h2> <p>Python 内置异常类的<a href="https://docs.python.org/3.7/library/exceptions.html#exception-hierarchy">继承层次</a>，其中 <code class="language-plaintext highlighter-rouge">BaseException</code> 是所有内置异常类的基类。在使用异常处理结构捕获和处理异常时，应尽量具体一点，建议先尝试捕获派生类，再捕获基类。最常用的是 <code class="language-plaintext highlighter-rouge">Exception</code> 类。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">BaseException</span>
 <span class="o">+--</span> <span class="nb">SystemExit</span>
 <span class="o">+--</span> <span class="nb">KeyboardInterrupt</span>
 <span class="o">+--</span> <span class="nb">GeneratorExit</span>
 <span class="o">+--</span> <span class="nb">Exception</span>
      <span class="o">+--</span> <span class="nb">StopIteration</span>
      <span class="o">+--</span> <span class="nb">StopAsyncIteration</span>
      <span class="o">+--</span> <span class="nb">ArithmeticError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">FloatingPointError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">OverflowError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">ZeroDivisionError</span>
      <span class="o">+--</span> <span class="nb">AssertionError</span>
      <span class="o">+--</span> <span class="nb">AttributeError</span>
      <span class="o">+--</span> <span class="nb">BufferError</span>
      <span class="o">+--</span> <span class="nb">EOFError</span>
      <span class="o">+--</span> <span class="nb">ImportError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">ModuleNotFoundError</span>
      <span class="o">+--</span> <span class="nb">LookupError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">IndexError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">KeyError</span>
      <span class="o">+--</span> <span class="nb">MemoryError</span>
      <span class="o">+--</span> <span class="nb">NameError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">UnboundLocalError</span>
      <span class="o">+--</span> <span class="nb">OSError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">BlockingIOError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">ChildProcessError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">ConnectionError</span>
      <span class="o">|</span>    <span class="o">|</span>    <span class="o">+--</span> <span class="nb">BrokenPipeError</span>
      <span class="o">|</span>    <span class="o">|</span>    <span class="o">+--</span> <span class="nb">ConnectionAbortedError</span>
      <span class="o">|</span>    <span class="o">|</span>    <span class="o">+--</span> <span class="nb">ConnectionRefusedError</span>
      <span class="o">|</span>    <span class="o">|</span>    <span class="o">+--</span> <span class="nb">ConnectionResetError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">FileExistsError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">FileNotFoundError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">InterruptedError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">IsADirectoryError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">NotADirectoryError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="n">PermissionError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">ProcessLookupError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">TimeoutError</span>
      <span class="o">+--</span> <span class="nb">ReferenceError</span>
      <span class="o">+--</span> <span class="nb">RuntimeError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">NotImplementedError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">RecursionError</span>
      <span class="o">+--</span> <span class="nb">SyntaxError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">IndentationError</span>
      <span class="o">|</span>         <span class="o">+--</span> <span class="nb">TabError</span>
      <span class="o">+--</span> <span class="nb">SystemError</span>
      <span class="o">+--</span> <span class="nb">TypeError</span>
      <span class="o">+--</span> <span class="nb">ValueError</span>
      <span class="o">|</span>    <span class="o">+--</span> <span class="nb">UnicodeError</span>
      <span class="o">|</span>         <span class="o">+--</span> <span class="nb">UnicodeDecodeError</span>
      <span class="o">|</span>         <span class="o">+--</span> <span class="nb">UnicodeEncodeError</span>
      <span class="o">|</span>         <span class="o">+--</span> <span class="nb">UnicodeTranslateError</span>
      <span class="o">+--</span> <span class="nb">Warning</span>
           <span class="o">+--</span> <span class="nb">DeprecationWarning</span>
           <span class="o">+--</span> <span class="nb">PendingDeprecationWarning</span>
           <span class="o">+--</span> <span class="nb">RuntimeWarning</span>
           <span class="o">+--</span> <span class="nb">SyntaxWarning</span>
           <span class="o">+--</span> <span class="nb">UserWarning</span>
           <span class="o">+--</span> <span class="nb">FutureWarning</span>
           <span class="o">+--</span> <span class="nb">ImportWarning</span>
           <span class="o">+--</span> <span class="nb">UnicodeWarning</span>
           <span class="o">+--</span> <span class="nb">BytesWarning</span>
           <span class="o">+--</span> <span class="nb">ResourceWarning</span>
</code></pre></div></div> <p>异常处理结构的基本思路是先尝试运行代码，如果没有问题就正常执行，如果发生了错误就尝试着去捕获和处理，最后实在没办法才崩溃。在函数中简易地抛出异常也可以使用 <code class="language-plaintext highlighter-rouge">raise</code> 关键字，其基本语法为 <code class="language-plaintext highlighter-rouge">raise ExceptionType('message')</code>。</p> <h3 id="try---except"><code class="language-plaintext highlighter-rouge">try - except</code></h3> <p>该异常处理结构类似于单分支选择结构，<code class="language-plaintext highlighter-rouge">try</code> 子句中的代码块包含可能会引发异常的语句，<code class="language-plaintext highlighter-rouge">except</code> 子句用于捕获相应的异常。如果 <code class="language-plaintext highlighter-rouge">try</code> 子句中的代码引发异常并被 <code class="language-plaintext highlighter-rouge">except</code> 子句捕获，就执行 <code class="language-plaintext highlighter-rouge">except</code> 子句中的代码块。如果 <code class="language-plaintext highlighter-rouge">try</code> 子句中的代码没有出现异常就继续执行异常处理结构之后的代码。如果出现异常但没有被 <code class="language-plaintext highlighter-rouge">except</code> 捕获，则继续向外层抛出。如果所有层都没有捕获并处理该异常，则程序崩溃。基本语法如下：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
	<span class="c1"># 可能会引发异常的代码
</span><span class="k">except</span> <span class="n">ExceptionType</span><span class="p">[</span> <span class="k">as</span> <span class="n">e</span><span class="p">]:</span>
	<span class="c1"># 如果 try 中的代码出现异常并被 except 捕获，执行此处的代码
</span></code></pre></div></div> <p class="note"><code class="language-plaintext highlighter-rouge">except</code> 后跟想要捕获的异常类型，常用的为 <code class="language-plaintext highlighter-rouge">Exception</code> 类，当然异常类型越具体越好，具体的类型<a href="#异常处理结构">见上</a>。<code class="language-plaintext highlighter-rouge">e</code> 是被抛出的异常类型的实例，可以访问其属性和方法，以获取更多关于异常的信息。</p> <h3 id="try---except---else"><code class="language-plaintext highlighter-rouge">try - except - else</code></h3> <p>该异常处理结构类似于双分支选择结构，如果 <code class="language-plaintext highlighter-rouge">try</code> 中的代码没有引发异常，则执行 <code class="language-plaintext highlighter-rouge">else</code> 中的代码。如果 <code class="language-plaintext highlighter-rouge">try</code> 中的代码抛出了异常并被 <code class="language-plaintext highlighter-rouge">except</code> 捕获则不会执行 <code class="language-plaintext highlighter-rouge">else</code> 中的代码。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
	<span class="c1"># 可能会引发异常的代码
</span><span class="k">except</span> <span class="n">ExceptionType</span><span class="p">[</span> <span class="k">as</span> <span class="n">e</span><span class="p">]:</span>
	<span class="c1"># 如果 try 中的代码出现异常并被 except 捕获，执行此处的代码
</span><span class="k">else</span><span class="p">:</span>
	<span class="c1"># 如果 try 中的代码没有出现异常，就继续执行此处的代码
</span></code></pre></div></div> <p class="note"><code class="language-plaintext highlighter-rouge">try</code> 中不应该放太多代码，而是应该放最有可能引发异常的代码。</p> <h3 id="try---except---finally"><code class="language-plaintext highlighter-rouge">try - except - finally</code></h3> <p>在该异常处理结构中，无论 <code class="language-plaintext highlighter-rouge">try</code> 中的代码是否发生异常，也不管抛出的异常是否成功被 <code class="language-plaintext highlighter-rouge">except</code> 捕获，<code class="language-plaintext highlighter-rouge">finally</code> 子句中的代码都会被执行。因此，<code class="language-plaintext highlighter-rouge">finally</code> 中的代码常用来做一些清理或释放资源的工作。当然，也可以结合 <code class="language-plaintext highlighter-rouge">else</code> 子句使用。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
	<span class="c1"># 可能会引发异常的代码
</span><span class="k">except</span> <span class="n">ExceptionType</span><span class="p">[</span> <span class="k">as</span> <span class="n">e</span><span class="p">]:</span>
	<span class="c1"># 如果 try 中的代码出现异常并被 except 捕获，执行此处的代码
</span><span class="k">else</span><span class="p">:</span>
	<span class="c1"># 也可以结合 else 子句
</span><span class="k">finally</span><span class="p">:</span>
	<span class="c1"># 无论如何此处的代码都会被执行
</span></code></pre></div></div> <h3 id="可以捕获多种异常的异常处理结构">可以捕获多种异常的异常处理结构</h3> <p>使用多个 <code class="language-plaintext highlighter-rouge">except</code> 子句即可实现捕获多种异常，一旦 <code class="language-plaintext highlighter-rouge">try</code> 子句中的代码抛出异常，就按照顺序依次检查与哪一个 <code class="language-plaintext highlighter-rouge">except</code> 的异常类型匹配，一旦捕获到异常，其他 <code class="language-plaintext highlighter-rouge">except</code> 子句将不会再尝试捕获。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span><span class="p">:</span>
	<span class="c1"># 可能会引发异常的代码
</span><span class="k">except</span> <span class="n">ExceptionType1</span><span class="p">:</span>
	<span class="c1"># 处理异常类型 1 的代码
</span><span class="k">except</span> <span class="n">ExceptionType2</span><span class="p">:</span>
	<span class="c1"># 处理异常类型 2 的代码
</span><span class="k">except</span> <span class="n">ExceptionType3</span><span class="p">:</span>
	<span class="c1"># 处理异常类型 3 的代码
</span></code></pre></div></div> <h2 id="函数">函数</h2> <h3 id="函数定义">函数定义</h3> <p>函数使用 <code class="language-plaintext highlighter-rouge">def</code> 关键字来定义，函数名尽量小写并用下划线 <code class="language-plaintext highlighter-rouge">_</code> 来连接单词。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">函数名</span><span class="p">([</span><span class="n">参数列表</span><span class="p">]):</span>
	<span class="sh">'''</span><span class="s">注释</span><span class="sh">'''</span>
	<span class="n">函数体</span>
</code></pre></div></div> <p>定义函数时，开头部分的注释可以为用户提供提示和使用帮助。使用 <code class="language-plaintext highlighter-rouge">help()</code> 或 <code class="language-plaintext highlighter-rouge">print(函数名.__doc__)</code> 来查看函数的使用帮助，会返回函数开头注释的内容。并且在调用该函数时输入左侧左侧圆括号之后，会立刻显示该函数的使用说明。</p> <p>定义函数时使用 <code class="language-plaintext highlighter-rouge">return</code> 语句结束函数执行的同时返回任意类型的值，函数返回值的类型与 <code class="language-plaintext highlighter-rouge">return</code> 语句返回表达式的类型一致。不论 <code class="language-plaintext highlighter-rouge">return</code> 语句出现在函数的什么位置，一旦得到执行将直接结束函数的执行。如果函数没有 <code class="language-plaintext highlighter-rouge">return</code> 语句、有 <code class="language-plaintext highlighter-rouge">return</code> 语句但是没有执行或者 <code class="language-plaintext highlighter-rouge">return</code> 语句执行了但是没有返回任何值，解释器都会认为该函数以 <code class="language-plaintext highlighter-rouge">return None</code> 结束，即返回空值。</p> <h3 id="装饰器">装饰器</h3> <p>装饰器（decorator）本身也是一个函数，它接受其他函数作为参数并对其进行一定的改造之后返回新函数，如<a href="">类方法</a>、静态方法等。在函数前使用 <code class="language-plaintext highlighter-rouge">@</code> 来执行。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 定义装饰器 before
</span><span class="k">def</span> <span class="nf">before</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
<span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
	<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Before function called.</span><span class="sh">'</span><span class="p">)</span>
	<span class="k">return</span> <span class="nf">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
<span class="k">return</span> <span class="n">wrapper</span>

<span class="c1"># 使用 before 装饰器修饰函数
</span><span class="nd">@before</span>
<span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
	<span class="k">return</span> <span class="mi">3</span>

<span class="c1"># 调用函数
</span><span class="nf">test</span><span class="p">()</span>

<span class="c1"># 运行结果
</span><span class="n">Before</span> <span class="n">function</span> <span class="n">called</span><span class="p">.</span>
<span class="mi">3</span>
</code></pre></div></div> <h3 id="递归函数">递归函数</h3> <p>递归函数是指在函数内部调用自身，并需要存在一种递归结束条件。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 定义一个计算阶乘的递归函数
</span><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
	<span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
		<span class="k">return</span> <span class="mi">1</span>  <span class="c1"># 0 的阶乘为 1
</span>	<span class="k">else</span><span class="p">:</span>
		<span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1"># n 的阶乘为 n 乘 (n-1) 的阶乘
</span></code></pre></div></div> <h3 id="函数参数">函数参数</h3> <p>一般来说，在函数内部直接修改形参的值不会影响实参。但是，如果传递给函数的是列表、字典、集合等可变序列，并且在函数内部使用索引或序列自身支持的方式为可变序列增加、删除元素或修改元素的值时，修改后的结果是可以反映到函数之外的，即不仅形参得到了修改，实参也得到了相应的修改。</p> <p class="note">如果一个函数需要以多种形式来接收参数，一般按照把位置参数放在最前面，然后是默认参数，接下来是一个星号的可变参数，最后是两个星号的可变参数的顺序。</p> <h4 id="位置参数">位置参数</h4> <p>位置参数在调用函数时形参和实参的顺序必须严格一致，并且形参和实参的数量必须相同。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">student</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
	<span class="nf">return </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="n">age</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">student</span><span class="p">(</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="p">(</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">student</span><span class="p">()</span>
<span class="nb">TypeError</span><span class="p">:</span> <span class="nf">student</span><span class="p">()</span> <span class="n">missing</span> <span class="mi">3</span> <span class="n">required</span> <span class="n">positional</span> <span class="n">arguments</span><span class="p">:</span> <span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">gender</span><span class="sh">'</span><span class="p">,</span> <span class="ow">and</span> <span class="sh">'</span><span class="s">age</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="默认参数">默认参数</h4> <p>默认参数是指在定义函数时可以为形参设置默认值，若为形参设置了默认值，则可以不用必须为其传递实参，此时函数会直接使用函数定义时设置的默认值，当然也可以通过传递实参来替换默认值。需要注意的是，在定义带有默认参数的函数时，<strong>任何一个默认参数的右边都不能再出现没有默认值的普通位置参数</strong>。可以使用 <code class="language-plaintext highlighter-rouge">函数名.__defaults__</code> 来查看函数所有默认参数的当前值，其返回值为一个元组。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">student</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">s_id</span><span class="o">=</span><span class="sh">'</span><span class="s">1901</span><span class="sh">'</span><span class="p">):</span>
	<span class="nf">return </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">s_id</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">student</span><span class="p">.</span><span class="n">__defaults__</span>
<span class="p">(</span><span class="sh">'</span><span class="s">1901</span><span class="sh">'</span><span class="p">,)</span>
</code></pre></div></div> <p>多次调用函数并且不为默认参数传递值时，默认参数只在函数定义时进行一次初始化，后续的调用不会再初始化。这对于像列表等可变类型的默认参数可能会导致逻辑错误。因此，要避免使用列表等可变序列作为函数参数的默认值。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">li</span><span class="o">=</span><span class="p">[]):</span>  <span class="c1"># 默认参数为可变类型
</span>	<span class="n">li</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">li</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">])</span>
<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">])</span>  <span class="c1"># 为默认参数传递了值，所以每次调用函数都会初始化
</span><span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">c</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">)</span>
<span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 没有为默认参数传递值，所以这一次调用函数时默认参数没有初始化，即返回的列表还是上一次的列表，因此结果不是想要的 ['b']，而是 ['a', 'b']
</span><span class="p">[</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># 对上述 demo() 函数的改进，不使用可变序列作为函数参数的默认值
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">li</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
	<span class="k">if</span> <span class="n">li</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>  <span class="c1"># 如果 li 为 None，则 li 赋值为空列表；如果 li 不为 None，则 item 会添加到现有的列表 li 中
</span>		<span class="n">li</span> <span class="o">=</span> <span class="p">[]</span>
	<span class="n">li</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">li</span>
</code></pre></div></div> <p>此外，若在定义函数时某个参数的默认值为另一个变量的值，那么该参数的默认值只依赖于函数定义时该变量的值，即函数的默认参数是在函数定义时确定值的，所以只会被初始化一次。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">i</span><span class="p">):</span>  <span class="c1"># 默认参数 n 的值取决于变量 i 的当前值
</span>	<span class="k">return</span> <span class="n">n</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">()</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">()</span>  <span class="c1"># 函数定义后再改变 i 的值不影响参数 n 的默认值
</span><span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">i</span><span class="p">):</span>  <span class="c1"># 重新定义函数
</span>	<span class="k">return</span> <span class="n">n</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">()</span>
<span class="mi">5</span>
</code></pre></div></div> <h4 id="关键字参数">关键字参数</h4> <p>关键字参数主要指<strong>调用函数时参数的传递方式</strong>，与函数定义无关。通过关键字参数可以按照参数名字来传递值，明确指定哪个值传递给哪个参数，从而可以使实参的顺序与形参的顺序不一致，但不会影响传递结果。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">student</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">s_id</span><span class="o">=</span><span class="sh">'</span><span class="s">1901</span><span class="sh">'</span><span class="p">):</span>
	<span class="nf">return </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="n">age</span><span class="p">,</span> <span class="n">s_id</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">student</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="n">gender</span><span class="o">=</span><span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">22</span><span class="p">)</span>  <span class="c1"># 按照关键字参数来传递参数的值
</span><span class="p">(</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="sh">'</span><span class="s">1901</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <h4 id="可变参数">可变参数</h4> <p>可变参数主要有两种形式：<strong><code class="language-plaintext highlighter-rouge">*args</code></strong> 和 <strong><code class="language-plaintext highlighter-rouge">**kwargs</code></strong>，前者用于接收任意多个位置实参并将其放在元组中，后者用于接收类似于关键字参数的多个实参并将其放入字典中（args 和 kwargs 只是常用名字，可以取其他任意名字替代）。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
	<span class="k">return</span> <span class="n">args</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>  <span class="c1"># 接收多个位置参数并放在元组中
</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>  <span class="c1"># 接收多个关键字参数并放在字典中
</span>	<span class="k">return</span> <span class="n">kwargs</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="p">{</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">z</span><span class="sh">'</span><span class="p">:</span> <span class="mi">3</span><span class="p">}</span>
</code></pre></div></div> <h4 id="传递参数时的序列解包">传递参数时的序列解包</h4> <p>传递参数时的序列解包是针对于<strong>实参</strong>来说。在调用含有多个位置参数的函数时，若实参为列表、元组、字典、集合等可迭代对象时，可以在实参名称前加一个星号 <code class="language-plaintext highlighter-rouge">*</code> 表示序列解包，Python 会自动将序列中的值依次传递给各个形参。若实参为字典，一个星号只能对其的键或值进行解包。若想要将字典的元素转换成类似于关键字参数的形式进行传递，则需要使用两个星号 <code class="language-plaintext highlighter-rouge">**</code> 进行解包。但是，对于这种形式的序列解包，要求<strong>实参字典中的所有键都必须是函数的形参名称</strong>，或者与函数中两个星号的可变参数相对应。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">student</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">gender</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
	<span class="k">return</span> <span class="sa">f</span><span class="sh">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">age</span><span class="si">}</span><span class="s"> years old, and </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> is </span><span class="si">{</span><span class="n">gender</span><span class="si">}</span><span class="s">.</span><span class="sh">'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">leon</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">,</span> <span class="mi">22</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">student</span><span class="p">(</span><span class="o">*</span><span class="n">leon</span><span class="p">)</span>  <span class="c1"># 对列表进行解包
</span><span class="sh">'</span><span class="s">Leon is 22 years old, and Leon is male.</span><span class="sh">'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">leon</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">,</span> <span class="mi">22</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">student</span><span class="p">(</span><span class="o">*</span><span class="n">leon</span><span class="p">)</span>  <span class="c1"># 对元组进行解包
</span><span class="sh">'</span><span class="s">Leon is 22 years old, and Leon is male.</span><span class="sh">'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">leon</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">gender</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">age</span><span class="sh">'</span><span class="p">:</span> <span class="mi">22</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">student</span><span class="p">(</span><span class="o">*</span><span class="n">leon</span><span class="p">)</span>  <span class="c1"># 一个星号默认对字典的键进行解包
</span><span class="sh">'</span><span class="s">name is age years old, and name is gender.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">student</span><span class="p">(</span><span class="o">*</span><span class="n">leon</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>  <span class="c1"># 对字典的值进行解包
</span><span class="sh">'</span><span class="s">Leon is 22 years old, and Leon is male.</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">student</span><span class="p">(</span><span class="o">**</span><span class="n">leon</span><span class="p">)</span>  <span class="c1"># 对字典的元素进行解包
</span><span class="sh">'</span><span class="s">Leon is 22 years old, and Leon is male.</span><span class="sh">'</span>
</code></pre></div></div> <p class="warning">在调用函数时，如果对实参使用一个星号进行序列解包，那么这些解包后的实参将会被当作普通的位置参数来对待，并且会在关键字参数和使用两个星号进行序列解包的参数之前进行处理。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
	<span class="nf">return </span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1"># 正常序列解包
</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1"># 优先处理使用一个星号的序列解包（2 -&gt; a，3 -&gt; b），再处理关键字参数（1 -&gt; a），所以会报错
</span><span class="nb">TypeError</span><span class="p">:</span> <span class="nf">demo</span><span class="p">()</span> <span class="n">got</span> <span class="n">multiple</span> <span class="n">values</span> <span class="k">for</span> <span class="n">argument</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1"># 正常序列解包
</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <h3 id="变量作用域">变量作用域</h3> <p>变量作用域是指变量起作用的代码范围，不同作用域内的同名变量之间互不影响。在函数内部定义的变量一般为局部变量，在函数外部定义的变量为全局变量。不管是局部变量还是全局变量，在其被定义之前都无法访问。</p> <p>当函数运行结束后，在函数内定义的局部变量将被自动删除而不可访问。在函数内使用 <code class="language-plaintext highlighter-rouge">global</code> 关键字声明的全局变量则仍然存在且可以访问。使用 <code class="language-plaintext highlighter-rouge">global</code> 声明的全局变量分为两种：</p> <ol> <li>一个变量已在函数外定义，如果在函数内需要修改这个变量的值，并将修改的结果反映到函数之外，可以在函数内使用 <code class="language-plaintext highlighter-rouge">global</code> 明确声明要使用的变量。</li> <li>在函数内直接使用 <code class="language-plaintext highlighter-rouge">global</code> 将一个变量声明为全局变量，如果在函数外没有定义该变量，在调用这个函数之后，会创建新的全局变量。</li> </ol> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">():</span>
	<span class="k">global</span> <span class="n">x</span>  <span class="c1"># 声明全局变量 x
</span>	<span class="n">x</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c1"># 全局变量
</span>	<span class="n">y</span> <span class="o">=</span> <span class="mi">4</span>  <span class="c1"># 局部变量
</span>	<span class="nf">return </span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">5</span>  <span class="c1"># 在函数外定义全局变量 x
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">()</span>  <span class="c1"># 调用函数修改了全局变量 x 的值
</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span>  <span class="c1"># 局部变量 y 在函数执行之后自动删除
</span><span class="nb">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="sh">'</span><span class="s">y</span><span class="sh">'</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">x</span>  <span class="c1"># 删除全局变量 x
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="nb">NameError</span><span class="p">:</span> <span class="n">name</span> <span class="sh">'</span><span class="s">x</span><span class="sh">'</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">defined</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">demo</span><span class="p">()</span>  <span class="c1"># 此次调用函数创建了全局变量 x
</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="mi">3</span>
</code></pre></div></div> <p class="note">如果在某个作用域内有为变量赋值的操作，那么该变量将被认为是该作用域内的局部变量。如果局部变量与全局变量具有相同的名字，那么该局部变量会在自己的作用域内暂时隐藏同名的全局变量。</p> <h3 id="lambda-表达式"><code class="language-plaintext highlighter-rouge">lambda</code> 表达式</h3> <p><code class="language-plaintext highlighter-rouge">lambda</code> 表达式用于声明匿名函数，即没有函数名字且临时使用。它可以包含多个参数，但只能有一个表达式。在表达式中可以调用其他函数，该表达式的计算结果相当于函数的返回值。其基本语法如下：</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 基本语法
</span><span class="k">lambda</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">expression</span>

<span class="c1"># 等价于
</span><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">arguments</span><span class="p">):</span>
	<span class="n">expression</span>

<span class="c1"># 也可以给 lambda 表达式起个名字
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="n">z</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">f</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="mi">12</span>

<span class="c1"># 也支持默认参数
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">g</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">5</span><span class="p">:</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="n">z</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">g</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="mi">10</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">g</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 调用时使用关键字参数
</span><span class="mi">6</span>
</code></pre></div></div> <p class="warning"><code class="language-plaintext highlighter-rouge">lambda</code> 表达式只能使用局部变量，若变量在外部作用域中定义，直接在表达式中使用时会出现错误，得不到预期的结果。</p> <h3 id="生成器函数">生成器函数</h3> <p>包含 <code class="language-plaintext highlighter-rouge">yield</code> 语句的函数可以用来创建生成器对象，这样的函数也称为生成器函数。<code class="language-plaintext highlighter-rouge">yield</code> 语句类似于 <code class="language-plaintext highlighter-rouge">return</code> 语句，都是用于从函数中返回值。<code class="language-plaintext highlighter-rouge">return</code> 语句一旦执行会立刻结束函数的运行，而 <code class="language-plaintext highlighter-rouge">yield</code> 语句执行后会返回一个值并暂停后续代码的执行，只有通过生成器对象的 <code class="language-plaintext highlighter-rouge">__next__()</code> 方法、内置函数 <code class="language-plaintext highlighter-rouge">next()</code>、<code class="language-plaintext highlighter-rouge">for</code> 循环遍历等方式显式”索要“数据时才能恢复执行。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 定义函数生成斐波那契数列
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">f</span><span class="p">():</span>
	<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
	<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
		<span class="k">yield</span> <span class="n">a</span>  <span class="c1"># 暂停执行，需要时再产生一个新元素
</span>		<span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nf">f</span><span class="p">()</span>  <span class="c1"># 创建生成器对象
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">x</span>
<span class="o">&lt;</span><span class="n">generator</span> <span class="nb">object</span> <span class="n">f</span> <span class="n">at</span> <span class="mh">0x00000293920A5890</span><span class="o">&gt;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
	<span class="nf">print</span><span class="p">(</span><span class="nf">next</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
	
<span class="mi">1</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="mi">5</span> <span class="mi">8</span> <span class="mi">13</span> <span class="mi">21</span> <span class="mi">34</span> <span class="mi">55</span>
</code></pre></div></div> <h2 id="面向对象">面向对象</h2> <p>创建类时用<strong>变量形式</strong>表示对象特征的称为数据成员，用<strong>函数形式</strong>表示对象行为的称为成员方法，数据成员和成员方法统称为类的成员。</p> <p>Python 使用 <code class="language-plaintext highlighter-rouge">class</code> 关键字来定义类，类名的首字母习惯上大写。定义类之后，就可以用来实例化对象，并通过 <code class="language-plaintext highlighter-rouge">对象名.成员</code> 的方式来访问其中的数据成员或成员方法。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Car</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
	<span class="k">def</span> <span class="nf">infor</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="k">return</span> <span class="sh">'</span><span class="s">infor</span><span class="sh">'</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">car</span> <span class="o">=</span> <span class="nc">Car</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">car</span><span class="p">.</span><span class="nf">infor</span><span class="p">()</span>
<span class="sh">'</span><span class="s">infor</span><span class="sh">'</span>
</code></pre></div></div> <p>可以使用内置函数 <code class="language-plaintext highlighter-rouge">isinstance()</code> 来测试一个对象是否是某个类的实例，或者使用 <code class="language-plaintext highlighter-rouge">type()</code> 查看对象类型。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">car</span><span class="p">,</span> <span class="n">Car</span><span class="p">)</span>
<span class="bp">True</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">type</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">__main__</span><span class="p">.</span><span class="n">Car</span><span class="sh">'</span><span class="s">&gt;  # __main__ 表示 Car 类的来源为主程序，即 car 对象是主程序中 Car 类的实例

# 如果是用 from test import Car 导入Car类
</span><span class="gp">&gt;&gt;&gt;</span> <span class="nf">type</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">'</span><span class="nc">test</span><span class="p">.</span><span class="n">Car</span><span class="sh">'</span><span class="s">&gt;
</span></code></pre></div></div> <p class="note">关键字 <code class="language-plaintext highlighter-rouge">pass</code> 用于表示空语句，常用于函数或类的定义、选择结构、循环结构和 <code class="language-plaintext highlighter-rouge">with</code> 块中，如果暂时没有确定如何实现某个功能，可以使用 <code class="language-plaintext highlighter-rouge">pass</code> 来占位。</p> <p>类同样使用三引号来进行必要的注释。</p> <h3 id="数据成员与成员方法">数据成员与成员方法</h3> <h4 id="私有成员与公有成员">私有成员与公有成员</h4> <p><strong>私有成员</strong>在类的外部不能直接访问，一般是在类的内部进行访问和操作，或在类的外部通过调用对象的公有成员方法来访问。<strong>公有成员</strong>既可以在类的内部也可以在外部中使用。在定义类的成员时，如果成员名以两个（或更多）下划线开头但是不以两个（或更多）下划线结束表示是私有成员，否则就不是。不过，Python 并没有对私有成员提供严格的访问保护机制，通过 <code class="language-plaintext highlighter-rouge">对象名._类名__私有成员名</code> 也可以在外部访问私有成员，但是不推荐。</p> <ol> <li><code class="language-plaintext highlighter-rouge">_xxx</code> 成员名以一个下划线开头，表示该成员是保护的，只有类对象和子类对象可以访问，应避免直接在外部访问，但 Python 不会阻止这个访问。使用一个或多个下划线开头的成员不能使用 <code class="language-plaintext highlighter-rouge">from module import *</code> 进行导入。</li> <li><code class="language-plaintext highlighter-rouge">__xxx</code> 表示私有成员，一般只有父类的对象自己能访问。</li> <li><code class="language-plaintext highlighter-rouge">__xxx__</code> 表示用于实现某些特殊行为的特殊成员方法，详见<a href="#特殊方法">特殊方法</a>。</li> </ol> <h4 id="数据成员">数据成员</h4> <p>数据成员可以分为<strong>属于类</strong>的数据成员和<strong>属于对象（实例）</strong>的数据成员。属于类的数据成员是该类中所有对象共享的，不属于任何一个对象，在定义属于类的数据成员时一般不在任何一个成员方法中定义。属于对象的数据成员一般在构造方法 <code class="language-plaintext highlighter-rouge">__init__()</code> 中定义，同一个类的不同对象的数据成员之间互不影响。在主程序中或类的外部，类的数据成员属于类，可以通过类名或对象名进行访问；对象的数据成员属于实例（对象），只能通过对象名进行访问。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Student</span><span class="p">:</span>
	<span class="n">address</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ECUST</span><span class="sh">'</span>  <span class="c1"># 类的数据成员
</span>	
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>  <span class="c1"># 对象的数据成员
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Student</span><span class="p">(</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">address</span>  <span class="c1"># 类的数据成员通过对象名访问
</span><span class="sh">'</span><span class="s">ECUST</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span>  <span class="c1"># 对象的数据成员通过对象名访问
</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Student</span><span class="p">.</span><span class="n">address</span>  <span class="c1"># 类的数据成员通过类名访问
</span><span class="sh">'</span><span class="s">ECUST</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Student</span><span class="p">.</span><span class="n">name</span>  <span class="c1"># 对象的数据成员无法通过类名访问
</span><span class="nb">AttributeError</span><span class="p">:</span> <span class="nb">type</span> <span class="nb">object</span> <span class="sh">'</span><span class="s">Student</span><span class="sh">'</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="sh">'</span><span class="s">name</span><span class="sh">'</span>
</code></pre></div></div> <h4 id="成员方法">成员方法</h4> <p>在面向对象中，方法一般指与特定对象（实例）绑定的函数，通过对象调用方法时，对象本身将被作为第一个参数（即 <code class="language-plaintext highlighter-rouge">self</code>）自动传递过去。Python 类的成员方法可分为公有方法、私有方法、类方法、静态方法和抽象方法等。公有方法、私有方法和抽象方法属于对象的<strong>实例方法</strong>，实例方法的第一个形参总是 <code class="language-plaintext highlighter-rouge">self</code> 以代表当前对象（实例）。在实例方法中访问实例成员时需要以 <code class="language-plaintext highlighter-rouge">self</code> 为前缀，但在外部通过对象名调用方法时不需要传递这个参数。</p> <p>类方法和静态方法都可以通过类名和对象名调用，但不能直接访问属于对象的成员，只能访问属于类的成员。并且这两种方法不属于任何实例，不会绑定的任何实例，也不依赖于任何实例的状态。类方法一般以 <code class="language-plaintext highlighter-rouge">cls</code> 作为第一个参数，表示该类本身。静态方法可以不接受任何参数（不需要用于代表类的实例的参数 <code class="language-plaintext highlighter-rouge">self</code> 和用于代表类的参数 <code class="language-plaintext highlighter-rouge">cls</code>）。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Student</span><span class="p">:</span>
	<span class="n">address</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ECUST</span><span class="sh">'</span>

	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">Leon</span><span class="sh">'</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">22</span><span class="p">):</span>  <span class="c1"># __init__() 是私有方法，当然也属于特殊方法
</span>		<span class="n">self</span><span class="p">.</span><span class="n">s_id</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 这里在 self 后的 s_id、name 和 __age 是数据成员，前两者是公有成员可以外部访问，后者是私有成员  
</span>		<span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
		<span class="n">self</span><span class="p">.</span><span class="n">__age</span> <span class="o">=</span> <span class="n">age</span>

	<span class="k">def</span> <span class="nf">set_id</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s_id</span><span class="p">):</span>  <span class="c1"># set_id() 是公有方法
</span>		<span class="n">self</span><span class="p">.</span><span class="n">s_id</span> <span class="o">=</span> <span class="n">s_id</span>
		<span class="k">return</span> <span class="n">s_id</span>

	<span class="k">def</span> <span class="nf">show_age</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">__age</span>  <span class="c1"># 在实例方法中可以访问私有成员
</span>		
	<span class="nd">@classmethod</span>  <span class="c1"># 使用装饰器声明类方法
</span>	<span class="k">def</span> <span class="nf">class_show_address</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
		<span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="n">address</span>  <span class="c1"># 只能访问类的成员
</span>		
	<span class="nd">@staticmethod</span>  <span class="c1"># 使用装饰器声明静态方法
</span>	<span class="k">def</span> <span class="nf">static_show_address</span><span class="p">():</span>  <span class="c1"># 可以没有参数
</span>		<span class="k">return</span> <span class="n">Student</span><span class="p">.</span><span class="n">address</span>
</code></pre></div></div> <p class="note">如果方法不需要访问或修改任何状态（不依赖于当前类的实例或类本身），声明为静态方法更合适；如果需要访问或修改类的状态，声明为类方法更合适；如果需要访问或修改实例的状态，则声明为实例方法更合适。</p> <p>抽象方法一般在抽象类中定义，其在父类中声明但不实现，需要在继承的子类中实现，否则子类无法创建实例。可以通过 <code class="language-plaintext highlighter-rouge">abc</code> 模块来创建抽象类，抽象类不能用于创建实例，主要是作为其他类的父类而存在。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABCMeta</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">ABCMeta</span><span class="p">):</span>  <span class="c1"># or ABC，定义抽象类
</span>	<span class="k">def</span> <span class="nf">f1</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>  <span class="c1"># 普通实例方法
</span>		<span class="k">pass</span>
		
	<span class="nd">@abstractmethod</span>  <span class="c1"># 抽象方法
</span>	<span class="k">def</span> <span class="nf">f2</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="k">raise</span> <span class="nc">Exception</span><span class="p">(</span><span class="sh">'</span><span class="s">You must reimplement this method.</span><span class="sh">'</span><span class="p">)</span>
	
<span class="k">class</span> <span class="nc">Bar</span><span class="p">(</span><span class="n">Foo</span><span class="p">):</span>
	<span class="k">def</span> <span class="nf">f2</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>  <span class="c1"># 必须在子类中重新实现父类中的抽象方法
</span>		<span class="k">pass</span>
</code></pre></div></div> <h4 id="属性">属性</h4> <p>公开的数据成员可以在外部被随意的访问和修改，很难保证新数据的合法性，所以数据很容易被破坏，一般的解决方案为定义数据成员为私有，然后设计公开的成员方法来提供对私有成员进行访问和修改的操作。<strong>属性</strong>是一种特殊形式的成员方法，既可以像成员方法一样对值进行必要的检查，又可以<strong>像数据成员一样灵活地访问</strong>。通过使用装饰器 <code class="language-plaintext highlighter-rouge">@property</code> 可以创建只读属性。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">__value</span> <span class="o">=</span> <span class="n">value</span>  <span class="c1"># 私有数据成员
</span>
	<span class="nd">@property</span>  <span class="c1"># 定义只读属性
</span>	<span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">__value</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">Test</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span>  <span class="c1"># value 被定义为属性后，访问的形式从成员方法（t.value()）变为数据成员（t.value）
</span><span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">5</span>  <span class="c1"># 只读属性不允许修改值
</span><span class="nb">AttributeError</span><span class="p">:</span> <span class="n">can</span><span class="sh">'</span><span class="s">t set attribute
</span><span class="gp">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span>  <span class="c1"># 也不允许删除属性
</span><span class="nb">AttributeError</span><span class="p">:</span> <span class="n">can</span><span class="sh">'</span><span class="s">t delete attribute
</span></code></pre></div></div> <p>通过 <code class="language-plaintext highlighter-rouge">@property</code> 的配套装饰器 <code class="language-plaintext highlighter-rouge">@&lt;attribute&gt;.setter</code> 和 <code class="language-plaintext highlighter-rouge">@&lt;attribute&gt;.deleter</code> 可以修改和删除属性（<code class="language-plaintext highlighter-rouge">&lt;attribute&gt;</code> 是指所定义的属性的名称，即成员方法的名称）。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 修改上面的类
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">__value</span> <span class="o">=</span> <span class="n">value</span>  <span class="c1"># 私有数据成员
</span>
	<span class="nd">@property</span>  <span class="c1"># 定义只读属性
</span>	<span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">__value</span>

	<span class="nd">@value.setter</span>  <span class="c1"># 定义 value 属性的 setter 方法
</span>	<span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">__value</span> <span class="o">=</span> <span class="n">value</span>

	<span class="nd">@value.deleter</span>  <span class="c1"># 定义 value 属性的 deleter 方法
</span>	<span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="k">del</span> <span class="n">self</span><span class="p">.</span><span class="n">__value</span>
		
<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">Test</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span>
<span class="mi">3</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">5</span>  <span class="c1"># 调用 setter 修改属性的值
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span>
<span class="mi">5</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">del</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span>  <span class="c1"># 调用 deleter 删除属性
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span>  <span class="c1"># 属性已删除，访问失败
</span><span class="nb">AttributeError</span><span class="p">:</span> <span class="sh">'</span><span class="s">Test</span><span class="sh">'</span> <span class="nb">object</span> <span class="n">has</span> <span class="n">no</span> <span class="n">attribute</span> <span class="sh">'</span><span class="s">_Test__value</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">1</span>  <span class="c1"># 动态增加属性
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">t</span><span class="p">.</span><span class="n">value</span>
<span class="mi">1</span>
</code></pre></div></div> <h4 id="类与对象的动态性">类与对象的动态性</h4> <p>在 Python 中可以动态地为自定义类和对象增加数据成员和成员方法。在为类和对象增加成员方法时，需使用 <code class="language-plaintext highlighter-rouge">types.MethodType(func, class_name/instance_name)</code> 将函数绑定到类或对象上，这样函数才能正确地接收 <code class="language-plaintext highlighter-rouge">self</code> 参数。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Car</span><span class="p">:</span>
	<span class="n">price</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c1"># 属于类的数据成员
</span>	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">c</span>  <span class="c1"># 属于对象的数据成员
</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">car</span> <span class="o">=</span> <span class="nc">Car</span><span class="p">(</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">Car</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Benz</span><span class="sh">'</span>  <span class="c1"># 动态增加类的数据成员
</span><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="n">Car</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">car</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
<span class="n">Benz</span> <span class="n">Benz</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">car</span><span class="p">.</span><span class="n">speed</span> <span class="o">=</span> <span class="mi">50</span>  <span class="c1"># 动态增加对象的数据成员
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">car</span><span class="p">.</span><span class="n">speed</span>
<span class="mi">50</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">set_length</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">l</span><span class="p">):</span>
	<span class="n">self</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="n">l</span>

<span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">types</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">car</span><span class="p">.</span><span class="n">set_length</span> <span class="o">=</span> <span class="n">types</span><span class="p">.</span><span class="nc">MethodType</span><span class="p">(</span><span class="n">set_length</span><span class="p">,</span> <span class="n">car</span><span class="p">)</span>  <span class="c1"># 动态增加对象的成员方法
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">car</span><span class="p">.</span><span class="nf">set_length</span><span class="p">(</span><span class="mi">150</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">car</span><span class="p">.</span><span class="n">length</span>
<span class="mi">150</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">def</span> <span class="nf">set_width</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">w</span><span class="p">):</span>
	<span class="n">self</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">w</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">Car</span><span class="p">.</span><span class="n">set_width</span> <span class="o">=</span> <span class="n">types</span><span class="p">.</span><span class="nc">MethodType</span><span class="p">(</span><span class="n">set_width</span><span class="p">,</span> <span class="n">Car</span><span class="p">)</span>  <span class="c1"># 动态增加类的成员方法
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">car</span><span class="p">.</span><span class="nf">set_width</span><span class="p">(</span><span class="mi">80</span><span class="p">)</span>  <span class="c1"># 对象调用类的新增加的方法
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">car</span><span class="p">.</span><span class="n">width</span>
<span class="mi">20</span>
</code></pre></div></div> <p>可以通过内置函数 <code class="language-plaintext highlighter-rouge">dir()</code> 来查看一个对象的所有属性（即数据成员）和方法，会返回一个列表，其中包含了属性和方法的名称，也包含了一些以双下划线开头和结尾的特殊方法。若只想查看一个对象的自定义属性，可以使用内置函数 <code class="language-plaintext highlighter-rouge">vars()</code>，会返回一个字典，其中包含了属性的名称和对应的值，不过它只能返回对象的实例属性，不能返回对象的类属性。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="nf">dir</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>  <span class="c1"># 会返回定义的类属性 price 和动态增加的类属性 name 和 width，以及动态增加的类方法 set_width
</span><span class="p">[</span><span class="sh">'</span><span class="s">__class__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__delattr__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__dict__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__dir__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__doc__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__eq__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__format__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__ge__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__getattribute__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__gt__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__hash__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__init__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__init_subclass__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__le__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__lt__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__module__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__ne__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__new__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__reduce__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__reduce_ex__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__repr__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__setattr__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__sizeof__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__str__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__subclasshook__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__weakref__</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">color</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">length</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">price</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">set_speed</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">set_width</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">speed</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nf">vars</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>  <span class="c1"># 只返回对象的实例属性
</span><span class="p">{</span><span class="sh">'</span><span class="s">color</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">length</span><span class="sh">'</span><span class="p">:</span> <span class="mi">150</span><span class="p">,</span> <span class="sh">'</span><span class="s">set_speed</span><span class="sh">'</span><span class="p">:</span> <span class="o">&lt;</span><span class="n">bound</span> <span class="n">method</span> <span class="n">set_speed</span> <span class="n">of</span> <span class="o">&lt;</span><span class="n">__main__</span><span class="p">.</span><span class="n">Car</span> <span class="nb">object</span> <span class="n">at</span> <span class="mh">0x00000293925A31C0</span><span class="o">&gt;&gt;</span><span class="p">,</span> <span class="sh">'</span><span class="s">speed</span><span class="sh">'</span><span class="p">:</span> <span class="mi">50</span><span class="p">}</span>
</code></pre></div></div> <h3 id="继承与多态">继承与多态</h3> <h4 id="继承">继承</h4> <p>子类可以继承父类的公有成员，但不能继承其私有成员。如果需要在子类中调用父类的方法，可以使用内置函数 <code class="language-plaintext highlighter-rouge">super().method(arguments)</code>。<code class="language-plaintext highlighter-rouge">super(__class__, &lt;first argument&gt;)</code> 具有两个参数，第一个参数通常是子类名，第二个参数通常是子类的一个实例。如果不提供任何参数，等价于 <code class="language-plaintext highlighter-rouge">super(当前类, 当前实例对象（self）)</code>。Python 也支持多继承，即一个子类可以继承多个父类。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">''</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">__name</span> <span class="o">=</span> <span class="bp">None</span>
		<span class="n">self</span><span class="p">.</span><span class="nf">set_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

	<span class="k">def</span> <span class="nf">set_name</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
		<span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
			<span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">'</span><span class="s">name must be a string.</span><span class="sh">'</span><span class="p">)</span>
		<span class="n">self</span><span class="p">.</span><span class="n">__name</span> <span class="o">=</span> <span class="n">name</span>

<span class="k">class</span> <span class="nc">Teacher</span><span class="p">(</span><span class="n">Person</span><span class="p">):</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">22</span><span class="p">):</span>
		<span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>  <span class="c1"># 调用父类的构造方法 __init__()，也可以用super(Teacher, self).__init__(name)
</span>		<span class="n">self</span><span class="p">.</span><span class="n">__age</span> <span class="o">=</span> <span class="bp">None</span>
		<span class="n">self</span><span class="p">.</span><span class="nf">set_age</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>

	<span class="k">def</span> <span class="nf">set_age</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
		<span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">age</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
			<span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">'</span><span class="s">age must be an integer.</span><span class="sh">'</span><span class="p">)</span>
		<span class="n">self</span><span class="p">.</span><span class="n">__age</span> <span class="o">=</span> <span class="n">age</span>
</code></pre></div></div> <h4 id="多态">多态</h4> <p>多态是指父类的同一个方法在不同子类的对象中具有不同的表现和行为。</p> <h3 id="特殊方法">特殊方法</h3> <p>Python 中最常用的特殊方法是构造方法 <code class="language-plaintext highlighter-rouge">__init__()</code>，用于初始化工作，在实例化对象时被自动调用和执行。如果没有设计构造方法，Python 会提供一个默认的构造方法用于必要的初始化。自定义的特殊方法可覆盖对应的运算符或内置函数的功能。如在自定义类时重写了 <code class="language-plaintext highlighter-rouge">__add__()</code> 方法，那么在对当前对象使用加号 <code class="language-plaintext highlighter-rouge">+</code> 时，Python 会自动调用 <code class="language-plaintext highlighter-rouge">__add__()</code> 方法所定义的功能，而不是原来 <code class="language-plaintext highlighter-rouge">+</code> 的功能。更多特殊方法详见 <a href="https://docs.python.org/3/reference/datamodel.html#special-method-names">https://docs.python.org/3/reference/datamodel.html#special-method-names</a>。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Test</span><span class="p">:</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>

	<span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
		<span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">Test</span><span class="p">):</span>  <span class="c1"># 如果 other 也属于 Test 类
</span>			<span class="k">return</span> <span class="nc">Test</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">-</span> <span class="n">other</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>  <span class="c1"># 重写加号 + 定义的方法
</span>		<span class="k">else</span><span class="p">:</span>
			<span class="k">return</span> <span class="nc">Test</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">-</span> <span class="n">other</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Test</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">2</span>  <span class="c1"># 实际运算为 3 - 2
</span><span class="o">&gt;&gt;&gt;</span> <span class="nf">print</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">y</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
<span class="mi">3</span> <span class="mi">1</span>
</code></pre></div></div> <h2 id="文件操作">文件操作</h2> <p>按照数据的组织形式，可以把文件分为<strong>文本文件</strong>和<strong>二进制文件</strong>两大类。文本文件存储的是常规字符串，通常每行以换行符 <code class="language-plaintext highlighter-rouge">\n</code> 结尾。扩展名为 txt、log、ini 的文本都属于文本文件。二进制文件把信息以字节串的形式进行存储。</p> <h3 id="open"><code class="language-plaintext highlighter-rouge">open()</code></h3> <p>内置函数 <code class="language-plaintext highlighter-rouge">open()</code> 可以用指定模式打开指定文件并创建文件对象，其语法为 <code class="language-plaintext highlighter-rouge">open(file, mode='r', buffering=None, encoding=None, errors=None, newline=None, closefd=True)</code>。</p> <ul> <li> <p>参数 <code class="language-plaintext highlighter-rouge">file</code> 用于指定要打开或创建的文件的名称，如果文件不在当前目录，可以使用相对路径（同级目录：<code class="language-plaintext highlighter-rouge">./</code>；上级目录：<code class="language-plaintext highlighter-rouge">../</code>；上两级目录：<code class="language-plaintext highlighter-rouge">../../</code>）或绝对路径（示例：<code class="language-plaintext highlighter-rouge">r'C:\Users\Username\Documents\file.txt'</code>）。</p> </li> <li> <p>参数 <code class="language-plaintext highlighter-rouge">mode</code> 用于指定打开文件后的处理方式。</p> </li> </ul> <table> <thead> <tr> <th style="text-align: left">模式</th> <th style="text-align: left">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'r'</code></td> <td style="text-align: left">只读模式（默认模式），如果文件不存在会抛出异常</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'w'</code></td> <td style="text-align: left">写模式，如果文件已存在，自动清空原有内容</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'x'</code></td> <td style="text-align: left">写模式，创建新文件，如果文件已存在会抛出异常</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'a'</code></td> <td style="text-align: left">追加模式，从文件末尾追加新内容，不会覆盖文件中原有内容</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'b'</code></td> <td style="text-align: left">二进制模式，<strong>一般搭配其他模式组合使用</strong>，如 <code class="language-plaintext highlighter-rouge">'rb'</code>、<code class="language-plaintext highlighter-rouge">'wb'</code>等，不允许指定 <code class="language-plaintext highlighter-rouge">encoding</code> 参数</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'t'</code></td> <td style="text-align: left">文本模式（默认模式，可省略）</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">'+'</code></td> <td style="text-align: left">同时读写模式，<strong>一般搭配其他模式组合使用</strong>，如 <code class="language-plaintext highlighter-rouge">'r+'</code>、<code class="language-plaintext highlighter-rouge">'rb+'</code>等</td> </tr> </tbody> </table> <p><code class="language-plaintext highlighter-rouge">'r+'</code> 模式光标在开头，不会创建新文件，也不会覆盖文件原有内容，用于想要读取内容时也可以添加新内容；<code class="language-plaintext highlighter-rouge">'w+'</code> 和 <code class="language-plaintext highlighter-rouge">'a+'</code> 模式光标在末尾，文件不存在会创建新文件，不同处在于前者会覆盖文件原有内容，而后者不会。</p> <ul> <li>参数 <code class="language-plaintext highlighter-rouge">encoding</code> 用于指定文件的字符编码方式，默认为 <code class="language-plaintext highlighter-rouge">utf-8</code>。</li> </ul> <h3 id="文件对象的属性与方法">文件对象的属性与方法</h3> <p><code class="language-plaintext highlighter-rouge">open()</code> 会返回一个可迭代的文件对象，通过该文件对象可以对文件进行读写操作。</p> <table> <thead> <tr> <th style="text-align: left">常用属性</th> <th style="text-align: left">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">closed</code></td> <td style="text-align: left">判断文件是否关闭，若文件已关闭则返回 True</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">mode</code></td> <td style="text-align: left">返回文件的打开模式</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">name</code></td> <td style="text-align: left">返回文件的名称</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">buffer</code></td> <td style="text-align: left">返回当前文件的缓冲区对象</td> </tr> </tbody> </table> <p>文件读写操作相关的方法都会自动改变文件光标的位置。例如，读取一个文件的 10 个字符后，再次读取字符的时候会从第 11 个字符的位置开始。</p> <table> <thead> <tr> <th style="text-align: left">常用方法</th> <th style="text-align: left">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">close()</code></td> <td style="text-align: left">把缓冲区的内容写入文件，同时关闭文件，并释放文件对象</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">flush()</code></td> <td style="text-align: left">把缓冲区的内容写入文件，但不关闭文件</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">read([size])</code></td> <td style="text-align: left">从文本文件中读取 <code class="language-plaintext highlighter-rouge">size</code> 个字符的内容作为结果返回，或从二进制文件中读取字节并返回。若省略 <code class="language-plaintext highlighter-rouge">size</code> 则表示读取所有内容，若 <code class="language-plaintext highlighter-rouge">size</code> 大于实际有效内容长度则在文件尾自动结束</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">readline()</code></td> <td style="text-align: left">读取一行内容作为结果返回</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">readlines()</code></td> <td style="text-align: left">把文本文件中的每行文本作为一个字符串存入列表中并返回，大文件不建议使用</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">seek(offset[, whence])</code></td> <td style="text-align: left">把文件光标移动到新位置，<code class="language-plaintext highlighter-rouge">offset</code> 表示相对于 <code class="language-plaintext highlighter-rouge">whence</code> 的位置，即光标要移动的字符数（正数表示向文件尾方向移动，负数则相反）。<code class="language-plaintext highlighter-rouge">whence</code> 为 0 表示从文件头开始计算，<code class="language-plaintext highlighter-rouge">whence</code> 为 1 表示从当前位置开始计算，<code class="language-plaintext highlighter-rouge">whence</code> 为 2 表示从文件尾开始计算，默认为 0</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">seekable()</code></td> <td style="text-align: left">测试当前文件是否支持随机访问，若不支持则无法调用 <code class="language-plaintext highlighter-rouge">seek()</code> 和 <code class="language-plaintext highlighter-rouge">tell()</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">tell()</code></td> <td style="text-align: left">返回文件光标当前的位置</td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">write(s)</code></td> <td style="text-align: left">把字符串 <code class="language-plaintext highlighter-rouge">s</code> 的内容写入文件中，若要换行，则需在字符串中添加换行符 <code class="language-plaintext highlighter-rouge">xxx\n</code></td> </tr> <tr> <td style="text-align: left"><code class="language-plaintext highlighter-rouge">writelines(s)</code></td> <td style="text-align: left">把字符串列表写入文件中</td> </tr> </tbody> </table> <p><code class="language-plaintext highlighter-rouge">seek(0)</code> 将光标移到文件头，<code class="language-plaintext highlighter-rouge">seek(0, 2)</code> 将光标移到文件尾。此外，<code class="language-plaintext highlighter-rouge">seek()</code> 后再 <code class="language-plaintext highlighter-rouge">read()</code> 可能得不到期望的结果，是因为缓存的原因。</p> <h3 id="上下文管理语句-with">上下文管理语句 <code class="language-plaintext highlighter-rouge">with</code></h3> <p>关键字 <code class="language-plaintext highlighter-rouge">with</code> 可以自动管理资源，不论因为什么原因跳出 <code class="language-plaintext highlighter-rouge">with</code> 块，总能保证文件被正确关闭，不需要再用 <code class="language-plaintext highlighter-rouge">close()</code> 方法来关闭文件。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">encoding</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="c1"># 通过文件对象 f 进行文件的读写
</span></code></pre></div></div> <h3 id="json-格式文本文件的读写">JSON 格式文本文件的读写</h3> <p>JSON（JavaScript Object Notation）是一种轻量级的数据交换格式，一般用于提升网络传输速率。Python 的标准库 <code class="language-plaintext highlighter-rouge">json</code> 提供对 JSON 的支持。通过 <code class="language-plaintext highlighter-rouge">json.dumps()</code> 和 <code class="language-plaintext highlighter-rouge">json.loads()</code> 将 Python 对象转换成 JSON 格式的字符串。通过 <code class="language-plaintext highlighter-rouge">json.dump()</code> 和 <code class="language-plaintext highlighter-rouge">json.load()</code> 将 Python 对象转换成 JSON 格式的字符串并写入到文件中或从文件中读取 JSON 格式的字符串。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="n">json</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>  <span class="c1"># 对列表进行 JSON 格式的编码
</span><span class="sh">'</span><span class="s">[1, 2, 3]</span><span class="sh">'</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">_</span><span class="p">)</span>  <span class="c1"># 解码，单个下划线 _ 在交互式环境中表示上一次操作的结果
</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">test.txt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>  <span class="c1"># 写入文件
</span><span class="o">&gt;&gt;&gt;</span> <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">test.txt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>  <span class="c1"># 从文件中读取
</span></code></pre></div></div> <h3 id="二进制文件的读写">二进制文件的读写</h3> <p><code class="language-plaintext highlighter-rouge">pass</code></p> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:book" role="doc-endnote"> <p>本教程参考书目：Python 程序设计基础（第 2 版） - 清华大学出版社 - 董付国 编著。 <a href="#fnref:book" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> <li id="fn:args" role="doc-endnote"> <p><code class="language-plaintext highlighter-rouge">[, start[, end]]</code> 方括号中的参数表示该参数是可选的，而非必需的。其中 <code class="language-plaintext highlighter-rouge">end</code> 参数在 <code class="language-plaintext highlighter-rouge">start</code> 参数的方括号中，表示只有提供了 <code class="language-plaintext highlighter-rouge">start</code> 参数才能提供 <code class="language-plaintext highlighter-rouge">end</code> 参数。 <a href="#fnref:args" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="Python"/><summary type="html"><![CDATA[Python Tutorial]]></summary></entry><entry><title type="html">Jekyll &amp;amp; Markdown</title><link href="https://xli7654321.github.io/blog/2024/Jekyll-and-Markdown/" rel="alternate" type="text/html" title="Jekyll &amp;amp; Markdown"/><published>2024-05-25T12:00:00+00:00</published><updated>2024-05-25T12:00:00+00:00</updated><id>https://xli7654321.github.io/blog/2024/Jekyll-and-Markdown</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/Jekyll-and-Markdown/"><![CDATA[<h2 id="jekyll--markdown">Jekyll &amp; Markdown</h2> <p>标题：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 一级标题 到 ###### 六级标题
</code></pre></div></div> <p>强调：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*text* or _text_ 斜体
**text** or __text__ 加粗
***text*** or ___text___ 加粗且斜体
~~删除线~~
</code></pre></div></div> <p>列表</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>无序：
<span class="p">*</span> 项目1
<span class="p">*</span> 项目2
或者
<span class="p">-</span> 项目3
<span class="p">+</span> 项目4

有序：
<span class="p">1.</span> 项目1
<span class="p">2.</span> 项目2

Task List:
<span class="p">-</span> [ ] todo item
<span class="p">-</span> [x] done item

定义列表（definition list）
<span class="nt">&lt;dl&gt;</span> 创建定义列表
<span class="nt">&lt;dt&gt;&lt;/dt&gt;</span> 表示要定义的项
<span class="nt">&lt;dd&gt;&lt;/dd&gt;</span> 表示该项的定义
<span class="nt">&lt;/dl&gt;</span>

列表中间有插入（但列表顺序不间断）
<span class="p">1.</span>  Item one
<span class="p">1.</span>  Item two

Some text

{:style="counter-reset:none"}
<span class="p">1.</span>  Item three
<span class="p">1.</span>  Item four

指定有序列表从某一个值开始
{:style="counter-reset:step-counter 41"}
<span class="p">1.</span>  Item 42
<span class="p">1.</span>  Item 43
<span class="p">1.</span>  Item 44

嵌套列表
<span class="p">-</span> level 1 item
<span class="p">  -</span> level 2 item
<span class="p">  -</span> level 2 item
<span class="p">    -</span> level 3 item
<span class="p">    -</span> level 3 item
</code></pre></div></div> <p>图片：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>![图片的替代文本]（图片的url）
![](../../assets/images/small-image.jpg)
图片放在assets/images里面
</code></pre></div></div> <p>表格：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|  表头  |  表头  |  表头  |
|  :---  |  :---: |  ---:  |
|  左对齐 |  居中  |  右对齐 |
|  内容   |  内容  |  内容  |
</code></pre></div></div> <p>Jekyll会自动为md生成HTML元素</p> <p>在 Kramdown（Jekyll 默认的 Markdown 解析器）中，<code class="language-plaintext highlighter-rouge">{:.class}</code>用于给某个元素添加类</p> <p><code class="language-plaintext highlighter-rouge">{:toc}</code>代表在当前位置插入一个自动生成的目录（table of contents），列出所有的标题</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. TOC
{:toc}
# 1. TOC == 1.代表创建一个有序列表，列表内容为TOC，TOC相当于占位符，会被{:toc}的内容替代
</code></pre></div></div> <p>在符号（例如_）前添加 \ 表示转义，将标记符号转义为普通文本</p> <p>创建内联链接</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nv">text</span><span class="p">](</span><span class="sx">text_url</span><span class="p">)</span>
text_url的形式:
https://www.openai.com
{% link docs/posts/2023-7-14-test.md %}#heading

或者在文本之后定义
[text]

<span class="p">[</span><span class="ss">text</span><span class="p">]:</span> <span class="sx">url</span>

或者使用<span class="nt">&lt;&gt;</span>直接给某个链接标记超链接
<span class="nt">&lt;url&gt;</span>

使用span标签
<span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">'xxx'</span><span class="nt">&gt;&lt;/span&gt;</span>
<span class="p">[</span><span class="nv">xxx</span><span class="p">](</span><span class="sx">#xxx</span><span class="p">)</span>
</code></pre></div></div> <p>三个反引号创建一个代码块，在第一组反引号后面写上语言名称，可以语法高亮</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```python
print("Hello, world!")
```
</code></pre></div></div> <p>通常在页脚处定义脚注的内容<code class="language-plaintext highlighter-rouge">[^footnote]: content</code>,然后可以在其他位置进行引用<code class="language-plaintext highlighter-rouge">[^footnote]</code>（类似参考文献）,html渲染后会变成上标，可以跳转，写两个脚注时中间应空一行。</p> <p>在文本之前加上<code class="language-plaintext highlighter-rouge">&gt;</code>符号，表示这段文本为引用</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; 这行文字是一个引用
</code></pre></div></div> <p>Jekyll中<code class="language-plaintext highlighter-rouge">blank</code>的title变量来自于_config.yml中的所配置的title</p> <p>在Jekyll的md中代码块中输入liquid语法，要加raw块，让Jekyll不处理</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
```liquid
content
```

</code></pre></div></div> <p>Markdowm支持在内容中直接使用HTML标签</p> <p>创建一个包含目录的可折叠面板</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;details open markdown="block"&gt; # &lt;details&gt; 标签用来创建一个可折叠的内容面板, open 表示面板默认处于展开状态, markdown="block"使得 Jekyll 在 &lt;details&gt; 标签内解析 Markdown 语法
&lt;summary&gt; # &lt;summary&gt; 标签定义了面板的标题, 此处标题为Table of contents
Table of contents
&lt;/summary&gt;
{: .text-delta} # 为标题添加类
- TOC # 创建无序列表，为标题自动生成目录
{:toc}
&lt;/details&gt;

{::options toc_levels="2..4" /}
# {::options ... ，}的形式叫做 "block IAL"（Inline Attribute List），用来为整个块（block）设置属性或选项，最后的 / 表示这个 block IAL 的结束。
# toc_levels="2..4" 是一个选项表示自动生成的目录只包含二到四级标题
</code></pre></div></div> <p>shift+Tab自动对齐</p> <p>shift+Enter 换一行</p> <p>Ctrl+/ 切换到markdown源代码</p> <p>在 HTML 中，Tab 字符的默认宽度通常是 8 个空格。在base.scss中修改code的tab-size为4，即可使typora编辑的代码块的tab正常显示为4个空格</p> <h2 id="just-the-docs">Just the Docs</h2> <p>在docs创建文章</p> <p>新建文件夹posts，在文件夹下首先posts.md，在开头设置</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: default # 指_layout中的default.html
title: Posts
nav_order: 1
has_children: true # 可以自动生成toc
permalink: /docs/ui-components # 自定义URL
---
</code></pre></div></div> <p>然后目录里的子内容如post1.md</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
layout: default
title: Post1
parent: Posts
nav_order: 1
---

&lt;div class="code-example" markdown="1"&gt; 
markdown="1"可以使div中的内容使用markdown格式渲染
如{: .btn}
</code></pre></div></div> <h3 id="configuration">configuration</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{: .class }
{: .no_toc }: 不生成目录（低于二级标题时可以考虑加）
.fs-6 .fw-300

设置label
.d-inline-block: 元素显示为行内块级元素
.label
.label-green/blue/purple/red/yellow

callouts:(配置文件中修改)
.highlight - yellow
.important - blue
.new - green
.note - purple
.warning - red

自定义callouts的title
{: .highlight/important/new/note/warning-title}
&gt; My title
&gt;
&gt; My callout content

多段落callout
{: .important }
&gt; A paragraph
&gt;
&gt; Another paragraph
&gt;
&gt; The last paragraph

callout缩进
&gt; {: .new }
&gt; &gt; A paragraph
&gt; &gt;
&gt; &gt; Another paragraph
&gt; &gt;
&gt; &gt; The last paragraph

嵌套callout 默认背景透明
{: .important }
&gt; {: .warning }
&gt; A paragraph
若背景不透明，加一个div并给这个div添加opaque类
{: .important }
&gt; {: .opaque }
&gt; &lt;div markdown="block"&gt;
&gt; {: .warning }
&gt; A paragraph
&gt; &lt;/div&gt;
</code></pre></div></div> <p>Dark/Light切换btn：</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;button class="btn js-toggle-dark-mode"&gt;Preview dark color scheme&lt;/button&gt;

&lt;script&gt;
const toggleDarkMode = document.querySelector('.js-toggle-dark-mode');

jtd.addEvent(toggleDarkMode, 'click', function(){
  if (jtd.getTheme() === 'dark') {
    jtd.setTheme('light');
    toggleDarkMode.textContent = 'Preview dark color scheme';
  } else {
    jtd.setTheme('dark');
    toggleDarkMode.textContent = 'Return to the light side';
  }
});
&lt;/script&gt;
</code></pre></div></div> <p>在_sass/custom/setup.scss中自定义sass，默认提供<code class="language-plaintext highlighter-rouge">grey-lt</code>, <code class="language-plaintext highlighter-rouge">grey-dk</code>, <code class="language-plaintext highlighter-rouge">blue</code>, <code class="language-plaintext highlighter-rouge">yellow</code>, <code class="language-plaintext highlighter-rouge">red</code>, <code class="language-plaintext highlighter-rouge">green</code>, <code class="language-plaintext highlighter-rouge">purple</code>,从000到300范围（_sass/support/_variables.scss）</p> <p>just the docs的主scss文件位于_includes/css/just-the-docs.scss，其中导入了_sass中的modules、support、custom/setup等，可以更改这里设置新的生效的scss路径（例如custom.scss必须有在主scss文件中<code class="language-plaintext highlighter-rouge">@import "./custom/custom"</code>）通常主scss位于assets/css文件夹中，这里使用了include</p> <p>在导航中添加md，可以直接通过<a href="https://jekyllrb.com/docs/pages/">pages</a>，也可以通过<a href="https://jekyllrb.com/docs/collections/">Jekyll collections</a>，collections必须加<code class="language-plaintext highlighter-rouge">_</code>前缀（例如<code class="language-plaintext highlighter-rouge">_posts</code>），并需要在<code class="language-plaintext highlighter-rouge">_config.yml</code>中配置，</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 定义Jekyll的collections
collections:
	posts:
		output: true
		permalink: "/posts/:title/"  # :title是一种变量的表示方法
	tutorials:
		output: true
		permalink: "/tutorials/"

# 定义哪些collections在just-the-docs中使用
just_the_docs:
	collections:
    	posts:
    		name: Posts
    		nav_exclude: true or false
    		nav_fold: true or false
    		search_exclude: true or false
    	tutorials:
    		name: Tutorials
</code></pre></div></div> <p>just the docs的collection将在上方docs之后在导航栏中新建一个板块以区分</p> <p>如果md文件中设置了<code class="language-plaintext highlighter-rouge">has_children: true</code>会在页面上自动生成TABLE OF CONTENTS块</p> <h3 id="ui-components">UI Components</h3> <p>在Just the docs中样式类的最原始的定义都在_sass/support.scss中</p> <h4 id="typography排版字体字号行距对齐方式等">typography（排版：字体、字号、行距、对齐方式等）</h4> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">_variable</span><span class="err">.</span><span class="na">scss</span><span class="err">
</span><span class="na">1</span><span class="err">) </span><span class="nl">font-family</span><span class="err">：原设置（</span><span class="na">mono</span><span class="err">为代码块的字体）
$</span><span class="na">body-font-family</span><span class="p">:</span> <span class="n">system-ui</span><span class="o">,</span> <span class="o">-</span><span class="n">apple-system</span><span class="o">,</span> <span class="n">blinkmacsystemfont</span><span class="o">,</span> <span class="s2">"Segoe UI"</span><span class="o">,</span> <span class="n">roboto</span><span class="o">,</span> <span class="s2">"Helvetica Neue"</span><span class="o">,</span> <span class="n">arial</span><span class="o">,</span> <span class="nb">sans-serif</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span>
<span class="nv">$mono-font-family</span><span class="p">:</span> <span class="s2">"SFMono-Regular"</span><span class="o">,</span> <span class="n">menlo</span><span class="o">,</span> <span class="n">consolas</span><span class="o">,</span> <span class="nb">monospace</span> <span class="o">!</span><span class="nb">default</span><span class="p">;</span>
<span class="na">2</span><span class="err">) </span><span class="nl">font-size</span><span class="p">:</span> <span class="nv">$font-size-1</span> <span class="o">-</span> <span class="nv">$font-size-10</span>
</code></pre></div></div> <p><a href="https://fontshub.pro/">font-download</a></p> <p>在default.html添加</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;head&gt;</span>
<span class="c">&lt;!-- 优化自定义字体加载（刷新页面会闪烁）问题（Flash of Unstyled Text），优先使用woff2 --&gt;</span>
  <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"preload"</span> <span class="na">href=</span><span class="s">"/assets/css/fonts/ProximaSoft-Medium.woff2"</span> <span class="na">as=</span><span class="s">"font"</span> <span class="na">type=</span><span class="s">"font/woff2"</span> <span class="na">crossorigin</span><span class="nt">&gt;</span>
<span class="nt">&lt;/head&gt;</span>
</code></pre></div></div> <p><code class="language-plaintext highlighter-rouge">@mixin</code> 混合器定义一个样式块，可以重复使用，然后使用<code class="language-plaintext highlighter-rouge">@include</code>在别的样式中使用这个样式</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">@mixin</span> <span class="nf">fs-1</span> <span class="p">{</span>
	<span class="nl">font-size</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.fs-1</span> <span class="p">{</span>
	<span class="k">@include</span> <span class="nd">fs-1</span><span class="p">;</span>
<span class="p">}</span>

<span class="err">也可以为</span><span class="o">@</span><span class="nt">mixin</span><span class="err">添加参数</span>
<span class="o">@</span><span class="nt">mixin</span> <span class="nt">border-radius</span><span class="o">(</span><span class="err">$</span><span class="nt">radius</span><span class="o">)</span> <span class="p">{</span>
	<span class="nl">border-radius</span><span class="p">:</span> <span class="nv">$radius</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.br-10</span> <span class="p">{</span>
	<span class="k">@include</span> <span class="nd">border-radius</span><span class="p">(</span><span class="m">10px</span><span class="p">);</span>
<span class="p">}</span>

<span class="err">例外一个例子</span>
<span class="o">@</span><span class="nt">mixin</span> <span class="nt">btn-color</span><span class="o">(</span><span class="err">$</span><span class="nt">fg</span><span class="o">,</span> <span class="err">$</span><span class="nt">bg</span><span class="o">)</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nv">$fg</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$bg</span><span class="o">,</span> <span class="m">2%</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// &amp; 用于表示父级选择器（parent selector）的引用</span>
<span class="k">&amp;</span><span class="nd">:hover</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nv">$fg</span><span class="p">;</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">darken</span><span class="p">(</span><span class="nv">$bg</span><span class="o">,</span> <span class="m">4%</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="字体">字体</h4> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">utilities</span><span class="err">/</span><span class="na">_typography</span><span class="err">.</span><span class="na">scss</span><span class="err">
</span><span class="nl">font-size</span><span class="p">:</span> <span class="o">.</span><span class="n">fs-1</span> <span class="o">-</span> <span class="o">.</span><span class="n">fs-10</span>
<span class="n">font-weight</span><span class="o">:</span> <span class="o">.</span><span class="n">fw-300</span> <span class="o">-</span> <span class="m">800</span>
<span class="o">//</span> <span class="n">line-height</span><span class="o">:</span> <span class="o">.</span><span class="n">lh-0</span><span class="o">,</span> <span class="o">.</span><span class="n">lh-default</span><span class="o">:</span> <span class="m">1</span><span class="mi">.4</span><span class="o">,</span> <span class="o">.</span><span class="n">lh-tight</span><span class="o">:</span> <span class="m">1</span><span class="mi">.25</span><span class="o">,</span> <span class="nv">$content-line-height</span><span class="o">:</span> <span class="m">1</span><span class="mi">.6</span>
<span class="n">letter-spacing</span><span class="o">:</span> <span class="o">.</span><span class="n">ls-5</span><span class="o">,</span> <span class="o">.</span><span class="n">ls-10</span><span class="o">,</span> <span class="o">.</span><span class="n">ls-0</span>
<span class="err">大写：</span><span class="o">.</span><span class="n">text-uppercase</span> 

<span class="n">typography</span><span class="o">.</span><span class="n">scss</span>
<span class="n">h1</span><span class="o">,</span> <span class="o">.</span><span class="n">text-alpha</span> <span class="p">{</span>
    <span class="k">@include</span> <span class="nd">fs-8</span>
<span class="p">}</span>

<span class="nt">h2</span><span class="o">/</span><span class="nc">.text-beta</span> <span class="nt">-</span> <span class="nt">fs-6</span>
<span class="nt">h3</span><span class="o">/</span><span class="nc">.text-gamma</span> <span class="nt">-</span> <span class="nt">fs-5</span>
<span class="nt">h4</span><span class="o">/</span><span class="nc">.text-delta</span> <span class="nt">-</span> <span class="nt">fs-4</span>
<span class="nt">h5</span><span class="o">/</span><span class="nc">.text-epsilon</span> <span class="nt">-</span> <span class="nt">fs-3</span>
<span class="nt">h6</span><span class="o">/</span><span class="nc">.text-zeta</span><span class="o">/</span><span class="nc">.text-small</span> <span class="nt">-</span> <span class="nt">fs-2</span>
<span class="nc">.text-mono</span><span class="o">(</span><span class="err">代码块样式</span><span class="o">)</span>
<span class="err">对齐：</span><span class="nc">.text-left</span><span class="o">,</span> <span class="nc">.text-center</span><span class="o">,</span> <span class="nc">.text-right</span><span class="o">(</span><span class="nt">text-align</span><span class="err">属性</span><span class="o">)</span>
</code></pre></div></div> <h3 id="buttons">Buttons</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>.btn
[Link button](http://example.com/){: .btn }
.btn-purple / 必须和.btn一起用因为只是改变了颜色{: .btn .btn-purple }
.btn-blue/green/outline

使用内联HTNL元素
&lt;button type="button" name="button" class="btn"&gt;Button element&lt;/button&gt;

更改button字体的大小
&lt;span class="fs-6"&gt;
[Big ass button](http://example.com/){: .btn }
&lt;/span&gt;

增加同一行两个btn之间的间距
{: .btn .btn-purple .mr-2 }
</code></pre></div></div> <h3 id="labels">Labels</h3> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{: .label} default is blue
{: .label .label-blue/green/purple/yellow/red}
</code></pre></div></div> <h4 id="mermaid">Mermaid</h4> <p><a href="https://mermaid.js.org/">Mermaid</a>用于创建流程图</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_config.yml

mermaid:
	# Pick an available version from https://cdn.jsdelivr.net/npm/mermaid/
	# 指定版本
	version: "9.1.6"
# 然后在_includes/mermaid_config.js进行进一步的设置
默认为空
{}

markdown中例子：
```mermaid
graph TD;
    A--&gt;B;
    A--&gt;C;
    B--&gt;D;
    C--&gt;D;
```
</code></pre></div></div> <h4 id="code">Code</h4> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;figure</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;pre&gt;&lt;code</span> <span class="na">class=</span><span class="s">"language-yaml"</span> <span class="na">data-lang=</span><span class="s">"yaml"</span><span class="nt">&gt;&lt;span</span> <span class="na">class=</span><span class="s">"na"</span><span class="nt">&gt;</span>kramdown<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"pi"</span><span class="nt">&gt;</span>:<span class="nt">&lt;/span&gt;</span>
  <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"na"</span><span class="nt">&gt;</span>syntax_highlighter_opts<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"pi"</span><span class="nt">&gt;</span>:<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"na"</span><span class="nt">&gt;</span>block<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"pi"</span><span class="nt">&gt;</span>:<span class="nt">&lt;/span&gt;</span>
      <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"na"</span><span class="nt">&gt;</span>line_numbers<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"pi"</span><span class="nt">&gt;</span>:<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kc"</span><span class="nt">&gt;</span>true<span class="nt">&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</span><span class="sb">


</span>在md中使用用于指定代码块中的代码类型并且不用再添加反引号<span class="sb">``` ```</span>
</code></pre></div></div> <h3 id="search">Search</h3> <p>search功能通过lunr.js实现，位置assets/js/vendor/lunr.min.js(min.js相比于.js去除了注释等，减小了文件的大小，以便在生产环境中使用，.js是完整源代码)，以<code class="language-plaintext highlighter-rouge">page title</code>,<code class="language-plaintext highlighter-rouge">page content</code>,<code class="language-plaintext highlighter-rouge">page url</code>进行索引</p> <p>防止page被搜索，在md的开头添加<code class="language-plaintext highlighter-rouge">search_exclude: true</code>,在nav中隐藏<code class="language-plaintext highlighter-rouge">nav_exclude: true</code></p> <h4 id="展示代码样例">展示代码样例</h4> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"code-example"</span> <span class="na">markdown=</span><span class="s">"1"</span><span class="nt">&gt;</span>
text
<span class="nt">&lt;/div&gt;</span>

<span class="p">```</span><span class="nl">python
</span><span class="n">code</span>
<span class="p">```</span>
</code></pre></div></div> <h3 id="utilities">Utilities</h3> <h4 id="colors">Colors</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_sass/support/_variables.scss
_sass/utilities/_colors.scss

light grey / dark grey / purple / blue / green / yellow / red
000 - 300
font color: .text-purple-000
background color: .bg-purple-000
</code></pre></div></div> <h4 id="layout">Layout</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Spacing 间距

spacing的值根据 1rem = 16px
1 0.25rem
2 0.5rem
3 0.75rem
4 1rem
5 1.5rem
6 2rem
7 2.5rem
8 3rem
auto

margin:
// .m-0, .m-1, .m-2
.m-
.mx- x轴方向
.my-
.mt- margin-top
.mr-
.mb-
.ml-

padding:
.p-
.px- x轴方向
.py-
.pt- padding-top
.pr-
.pb-
.pl-

水平对齐
.flex-justify-start justify-content: flex-start
.flex-justify-end
.flex-justify-between
.flex-justify-around

垂直对齐
.v-align-baseline vertical-align: baseline
.v-align-bottom
.v-align-middle
.v-align-text-bottom
.v-align-text-top
.v-align-top

Display
.d-block display: block
.d-flex
.d-inline
.d-inline-block
.d-none
</code></pre></div></div> <h4 id="响应式">响应式</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>上述定义的layout类均可使用响应式类
例如 .d-sm-block

xs 	320px (20rem) and up
sm 	500px (31.25rem) and up
md 	740px (46.25rem) and up
lg 	1120px (70rem) and up
xl 	1400px (87.5rem) and up
</code></pre></div></div> <p>两种布局</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>layout: default

layout: minimal
省略了侧边栏和导航，只有单纯的内容页面
可以用于一些特殊的跳转

点明parent, grand_parent
如果有has_children, 会自动生成TOC
</code></pre></div></div> <p>返回主页面语法</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nv">Return to main website</span><span class="p">](</span><span class="sx">/</span><span class="p">)</span>.
</code></pre></div></div> <p>外部链接在配置中设置</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># External navigation links</span>
<span class="c1"># 导航栏位于最后的外部链接（带图标）</span>
<span class="na">nav_external_links</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">title</span><span class="pi">:</span> <span class="s">Uni-CYPred</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">http://47.115.205.248:8080</span>
</code></pre></div></div> <h4 id="navigation-structure-导航结构">Navigation Structure 导航结构</h4> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>定义Page的顺序, 在开头设置 nav_order
---
layout: default
title: Test
nav_order: 2
---

配置文件中设置
nav_sort: case_sensitive # 表示大写在小写前面

不希望出现在导航中的Page，同时没有title的页面也会被排除
---
layout: default
title: 404
nav_exclude: true
---

有子页面的Page(父页面)
has_children: true

子页面（目前）：
parent: xxx
grand_parent: xxx
nav_order: 2

反转子页面默认的排序顺序
child_nav_order: reversed

有子页面的page会自动生成TOC
如果要禁止
has_toc: false

aux_links 辅助链接（右上角） - 配置中设置

外部链接 - 配置中设置

页面中目录
# Navigation Structure
{: .no_toc }

## Table of contents
{: .no_toc .text-delta }

1. TOC
{:toc}

可折叠目录
&lt;details open markdown="block"&gt;
  &lt;summary&gt;
    Table of contents
  &lt;/summary&gt;
  {: .text-delta }
1. TOC
{:toc}
&lt;/details&gt;

</code></pre></div></div> <h3 id="customization">Customization</h3> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>切换 color scheme
<span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">"btn js-toggle-dark-mode"</span><span class="nt">&gt;</span>Preview dark color scheme<span class="nt">&lt;/button&gt;</span>

<span class="nt">&lt;script&gt;</span>
const toggleDarkMode = document.querySelector('.js-toggle-dark-mode');

jtd.addEvent(toggleDarkMode, 'click', function(){
  if (jtd.getTheme() === 'dark') {
    jtd.setTheme('light');
    toggleDarkMode.textContent = 'Preview dark color scheme';
  } else {
    jtd.setTheme('dark');
    toggleDarkMode.textContent = 'Return to the light side';
  }
});
<span class="nt">&lt;/script&gt;</span>

添加自定义的color scheme
添加文件 _sass/color_schemes/myscheme.scss 进行样式覆盖即可
默认以light为基础设置
如果想要以dark为基础设置，添加 @import "../color_schemes/dark";
然后在_config.yml中设置 color_scheme: myscheme
如果想通过Javascript动态改变scheme，需要添加文件
assets/css/just-the-docs-myscheme.scss
<span class="gh">在文件中添加：
---
</span><span class="p">---</span>
{% include css/just-the-docs.scss.liquid color_scheme="myscheme" %}
然后在js中则是：jtd.setTheme("myscheme")

添加新的变量：
// _sass/custom/setup.scss
$pink-000: #f77ef1;
$pink-100: #f967f1;
$pink-200: #e94ee1;
$pink-300: #dd2cd4;

在_includes中的一些自定义
<span class="ge">_includes/toc_</span>heading_custom.html
<span class="ge">_includes/footer_</span>custom.html
<span class="ge">_includes/head_</span>custom.html
<span class="ge">_includes/header_</span>custom.html
<span class="ge">_includes/nav_</span>footer_custom.html
<span class="ge">_includes/search_</span>placeholder_custom.html

页面的一些组成部分
_includes/head.html
_includes/icons/icons.html
_includes/components/sidebar.html
_includes/components/header.html
_includes/components/breadcrumbs.html
<span class="ge">_includes/vendor/anchor_</span>headings.html
<span class="ge">_includes/components/children_</span>nav.html
_includes/components/footer.html
<span class="ge">_includes/components/search_</span>footer.html
_includes/components/mermaid.html

更改default页面 _layouts/default.html
</code></pre></div></div> <p>网站内部link格式</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="nv">Configuration</span><span class="p">](</span><span class="sx">{%</span> link docs/customization.md %}#override-includes)
</code></pre></div></div> <p>标题写法</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## Header 2</span>

<span class="gu">## [](#header-2)Header 2</span>
</code></pre></div></div> <p>导航栏/breadcrumb栏/右上角aux link的字体样式在_sass/navigation.scss中设置</p> <p>更改default.html页面最下方到浏览器底部的距离（对class=”main-content-wrap”修改，在_sass/layout.scss）</p> <h3 id="jekyll完整流程">Jekyll完整流程</h3> <p>安装Ruby</p> <p><a href="https://rubyinstaller.org/downloads/">Ruby下载</a> 检查安装 <code class="language-plaintext highlighter-rouge">ruby -v</code></p> <p>安装Jekyll和bundle</p> <p>在cmd中执行<code class="language-plaintext highlighter-rouge">gem install bundler jekyll</code></p> <p>然后从模板的github上<code class="language-plaintext highlighter-rouge">git clone</code>, cmd进入目录下，执行<code class="language-plaintext highlighter-rouge">bundle install</code></p> <p>本地运行：<code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></p> <p>上传github.io，仓库名必须为 username.github.io</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git remote -v
git remote remove origin
git remote add origin git@github.com:dreamlessdrugs/dreamlessdrugs.github.io.git add
git add .
git commit -m "Initial commit"
git push -u origin main
</code></pre></div></div> <p>支持中文搜索功能</p> <p>从https://github.com/MihaiValentin/lunr-languages中下载js文件，然后在head.html 中添加</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/vendor/lunr.stemmer.support.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/vendor/lunr.zh.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"/assets/js/vendor/lunr.multi.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div> <p>然后在 <code class="language-plaintext highlighter-rouge">asset/js/just-the-docs.js</code> 的 initSearch() 函数中的lunr.js 的初始化模块添加</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nf">lunr</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="k">this</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="nx">lunr</span><span class="p">.</span><span class="nf">multiLanguage</span><span class="p">(</span><span class="dl">'</span><span class="s1">en</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">zh</span><span class="dl">'</span><span class="p">));</span> <span class="c1">// add</span>
  <span class="k">this</span><span class="p">.</span><span class="nf">ref</span><span class="p">(</span><span class="dl">'</span><span class="s1">id</span><span class="dl">'</span><span class="p">);</span>
  <span class="k">this</span><span class="p">.</span><span class="nf">field</span><span class="p">(</span><span class="dl">'</span><span class="s1">title</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">boost</span><span class="p">:</span> <span class="mi">200</span> <span class="p">});</span>
  <span class="k">this</span><span class="p">.</span><span class="nf">field</span><span class="p">(</span><span class="dl">'</span><span class="s1">content</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">boost</span><span class="p">:</span> <span class="mi">2</span> <span class="p">});</span>
  <span class="c1">// ... rest of the code</span>
<span class="p">});</span>
</code></pre></div></div> <p><strong>使用 <code class="language-plaintext highlighter-rouge">&lt;span id="xxx"&gt;&lt;/span&gt;</code> 标签创建页内链接。</strong> <strong>使用 <code class="language-plaintext highlighter-rouge">&lt;span class="xxx"&gt;&lt;/span&gt;</code> 标签添加自定义样式。</strong></p> <p>https://zhuanlan.zhihu.com/p/613068160</p> <p>https://www.taniarascia.com/make-a-static-website-with-jekyll/</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="Jekyll"/><category term="Markdown"/><summary type="html"><![CDATA[Jekyll & Markdown Tutorial]]></summary></entry><entry><title type="html">a post with tabs</title><link href="https://xli7654321.github.io/blog/2024/tabs/" rel="alternate" type="text/html" title="a post with tabs"/><published>2024-05-01T00:32:13+00:00</published><updated>2024-05-01T00:32:13+00:00</updated><id>https://xli7654321.github.io/blog/2024/tabs</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/tabs/"><![CDATA[<p>This is how a post with <a href="https://github.com/Ovski4/jekyll-tabs">tabs</a> looks like. Note that the tabs could be used for different purposes, not only for code.</p> <h2 id="first-tabs">First tabs</h2> <p>To add tabs, use the following syntax:</p> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-1</span><span class="w"> </span><span class="cp">%}</span>

Content 1

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span><span class="nv">group-name</span><span class="w"> </span><span class="nv">tab-name-2</span><span class="w"> </span><span class="cp">%}</span>

Content 2

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>

<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> <p>With this you can generate visualizations like:</p> <ul id="log" class="tab" data-tab="94cb58e9-6da6-495c-998f-dd7a0d829701" data-name="log"> <li class="active" id="log-php"> <a href="#">php </a> </li> <li id="log-js"> <a href="#">js </a> </li> <li id="log-ruby"> <a href="#">ruby </a> </li> </ul> <ul class="tab-content" id="94cb58e9-6da6-495c-998f-dd7a0d829701" data-name="log"> <li class="active"> <div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">var_dump</span><span class="p">(</span><span class="s1">'hello'</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">hello</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div> </li> <li> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">pputs</span> <span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span>
</code></pre></div></div> </li> </ul> <h2 id="another-example">Another example</h2> <ul id="data-struct" class="tab" data-tab="6d570258-c4a2-462b-b12b-5cf91c870a20" data-name="data-struct"> <li class="active" id="data-struct-yaml"> <a href="#">yaml </a> </li> <li id="data-struct-json"> <a href="#">json </a> </li> </ul> <ul class="tab-content" id="6d570258-c4a2-462b-b12b-5cf91c870a20" data-name="data-struct"> <li class="active"> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">hello</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">whatsup"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">hi"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"hello"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"whatsup"</span><span class="p">,</span><span class="w"> </span><span class="s2">"hi"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> </ul> <h2 id="tabs-for-something-else">Tabs for something else</h2> <ul id="something-else" class="tab" data-tab="62a9e9c7-beab-41d6-bb51-576bb97a6c1e" data-name="something-else"> <li class="active" id="something-else-text"> <a href="#">text </a> </li> <li id="something-else-quote"> <a href="#">quote </a> </li> <li id="something-else-list"> <a href="#">list </a> </li> </ul> <ul class="tab-content" id="62a9e9c7-beab-41d6-bb51-576bb97a6c1e" data-name="something-else"> <li class="active"> <p>Regular text</p> </li> <li> <blockquote> <p>A quote</p> </blockquote> </li> <li> <p>Hipster list</p> <ul> <li>brunch</li> <li>fixie</li> <li>raybans</li> <li>messenger bag</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">a post with typograms</title><link href="https://xli7654321.github.io/blog/2024/typograms/" rel="alternate" type="text/html" title="a post with typograms"/><published>2024-04-29T23:36:10+00:00</published><updated>2024-04-29T23:36:10+00:00</updated><id>https://xli7654321.github.io/blog/2024/typograms</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/typograms/"><![CDATA[<p>This is an example post with some <a href="https://github.com/google/typograms/">typograms</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+
</code></pre> <p>Another example:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> <p>which generates:</p> <pre><code class="language-typograms">.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <p>For more examples, check out the <a href="https://google.github.io/typograms/#examples">typograms documentation</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="diagrams"/><summary type="html"><![CDATA[this is what included typograms code could look like]]></summary></entry><entry><title type="html">a post that can be cited</title><link href="https://xli7654321.github.io/blog/2024/post-citation/" rel="alternate" type="text/html" title="a post that can be cited"/><published>2024-04-28T15:06:00+00:00</published><updated>2024-04-28T15:06:00+00:00</updated><id>https://xli7654321.github.io/blog/2024/post-citation</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/post-citation/"><![CDATA[<p>This is an example post that can be cited. The content of the post ends here, while the citation information is automatically provided below. The only thing needed is for you to set the <code class="language-plaintext highlighter-rouge">citation</code> key in the front matter to <code class="language-plaintext highlighter-rouge">true</code>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="citation"/><summary type="html"><![CDATA[this is what a post that can be cited looks like]]></summary></entry><entry><title type="html">a post with pseudo code</title><link href="https://xli7654321.github.io/blog/2024/pseudocode/" rel="alternate" type="text/html" title="a post with pseudo code"/><published>2024-04-15T00:01:00+00:00</published><updated>2024-04-15T00:01:00+00:00</updated><id>https://xli7654321.github.io/blog/2024/pseudocode</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/pseudocode/"><![CDATA[<p>This is an example post with some pseudo code rendered by <a href="https://github.com/SaswatPadhi/pseudocode.js">pseudocode</a>. The example presented here is the same as the one in the <a href="https://saswat.padhi.me/pseudocode.js/">pseudocode.js</a> documentation, with only one simple but important change: everytime you would use <code class="language-plaintext highlighter-rouge">$</code>, you should use <code class="language-plaintext highlighter-rouge">$$</code> instead. Also, note that the <code class="language-plaintext highlighter-rouge">pseudocode</code> key in the front matter is set to <code class="language-plaintext highlighter-rouge">true</code> to enable the rendering of pseudo code. As an example, using this code:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">pseudocode
</span><span class="sb">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Generates:</p> <pre><code class="language-pseudocode">% This quicksort algorithm is extracted from Chapter 7, Introduction to Algorithms (3rd edition)
\begin{algorithm}
\caption{Quicksort}
\begin{algorithmic}
\PROCEDURE{Quicksort}{$$A, p, r$$}
    \IF{$$p &lt; r$$}
        \STATE $$q = $$ \CALL{Partition}{$$A, p, r$$}
        \STATE \CALL{Quicksort}{$$A, p, q - 1$$}
        \STATE \CALL{Quicksort}{$$A, q + 1, r$$}
    \ENDIF
\ENDPROCEDURE
\PROCEDURE{Partition}{$$A, p, r$$}
    \STATE $$x = A[r]$$
    \STATE $$i = p - 1$$
    \FOR{$$j = p$$ \TO $$r - 1$$}
        \IF{$$A[j] &lt; x$$}
            \STATE $$i = i + 1$$
            \STATE exchange
            $$A[i]$$ with $$A[j]$$
        \ENDIF
        \STATE exchange $$A[i]$$ with $$A[r]$$
    \ENDFOR
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is what included pseudo code could look like]]></summary></entry><entry><title type="html">a post with code diff</title><link href="https://xli7654321.github.io/blog/2024/code-diff/" rel="alternate" type="text/html" title="a post with code diff"/><published>2024-01-27T19:22:00+00:00</published><updated>2024-01-27T19:22:00+00:00</updated><id>https://xli7654321.github.io/blog/2024/code-diff</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/code-diff/"><![CDATA[<p>You can display diff code by using the regular markdown syntax:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff
</span><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
</span><span class="gd">--- a/sample.js
</span><span class="gi">+++ b/sample.js
</span><span class="p">@@ -1 +1 @@</span>
<span class="gd">-console.log("Hello World!")
</span><span class="gi">+console.log("Hello from Diff2Html!")
</span></code></pre></div></div> <p>But this is difficult to read, specially if you have a large diff. You can use <a href="https://diff2html.xyz/">diff2html</a> to display a more readable version of the diff. For this, just use <code class="language-plaintext highlighter-rouge">diff2html</code> instead of <code class="language-plaintext highlighter-rouge">diff</code> for the code block language:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">diff2html
</span><span class="sb">diff --git a/sample.js b/sample.js
index 0000001..0ddf2ba
--- a/sample.js
+++ b/sample.js
@@ -1 +1 @@
-console.log("Hello World!")
+console.log("Hello from Diff2Html!")</span>
<span class="p">```</span>
</code></pre></div></div> <p>If we use a longer example, for example <a href="https://github.com/rtfpessoa/diff2html/commit/c2c253d3e3f8b8b267f551e659f72b44ca2ac927">this commit from diff2html</a>, it will generate the following output:</p> <pre><code class="language-diff2html">From 2aaae31cc2a37bfff83430c2c914b140bee59b6a Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sun, 9 Oct 2016 16:41:54 +0100
Subject: [PATCH 1/2] Initial template override support

---
 scripts/hulk.js                    |  4 ++--
 src/diff2html.js                   |  3 +--
 src/file-list-printer.js           | 11 ++++++++---
 src/hoganjs-utils.js               | 29 +++++++++++++++++------------
 src/html-printer.js                |  6 ++++++
 src/line-by-line-printer.js        |  6 +++++-
 src/side-by-side-printer.js        |  6 +++++-
 test/file-list-printer-tests.js    |  2 +-
 test/hogan-cache-tests.js          | 18 +++++++++++++++---
 test/line-by-line-tests.js         |  3 +--
 test/side-by-side-printer-tests.js |  3 +--
 11 files changed, 62 insertions(+), 29 deletions(-)

diff --git a/scripts/hulk.js b/scripts/hulk.js
index 5a793c18..a4b1a4d5 100755
--- a/scripts/hulk.js
+++ b/scripts/hulk.js
@@ -173,11 +173,11 @@ function namespace(name) {
 // write a template foreach file that matches template extension
 templates = extractFiles(options.argv.remain)
   .map(function(file) {
-    var openedFile = fs.readFileSync(file, 'utf-8');
+    var openedFile = fs.readFileSync(file, 'utf-8').trim();
     var name;
     if (!openedFile) return;
     name = namespace(path.basename(file).replace(/\..*$/, ''));
-    openedFile = removeByteOrderMark(openedFile.trim());
+    openedFile = removeByteOrderMark(openedFile);
     openedFile = wrap(file, name, openedFile);
     if (!options.outputdir) return openedFile;
     fs.writeFileSync(path.join(options.outputdir, name + '.js')
diff --git a/src/diff2html.js b/src/diff2html.js
index 21b0119e..64e138f5 100644
--- a/src/diff2html.js
+++ b/src/diff2html.js
@@ -7,7 +7,6 @@

 (function() {
   var diffParser = require('./diff-parser.js').DiffParser;
-  var fileLister = require('./file-list-printer.js').FileListPrinter;
   var htmlPrinter = require('./html-printer.js').HtmlPrinter;

   function Diff2Html() {
@@ -43,7 +42,7 @@

     var fileList = '';
     if (configOrEmpty.showFiles === true) {
-      fileList = fileLister.generateFileList(diffJson, configOrEmpty);
+      fileList = htmlPrinter.generateFileListSummary(diffJson, configOrEmpty);
     }

     var diffOutput = '';
diff --git a/src/file-list-printer.js b/src/file-list-printer.js
index e408d9b2..1e0a2c61 100644
--- a/src/file-list-printer.js
+++ b/src/file-list-printer.js
@@ -8,11 +8,16 @@
 (function() {
   var printerUtils = require('./printer-utils.js').PrinterUtils;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var baseTemplatesPath = 'file-summary';
   var iconsBaseTemplatesPath = 'icon';

-  function FileListPrinter() {
+  function FileListPrinter(config) {
+    this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   FileListPrinter.prototype.generateFileList = function(diffFiles) {
@@ -38,5 +43,5 @@
     });
   };

-  module.exports.FileListPrinter = new FileListPrinter();
+  module.exports.FileListPrinter = FileListPrinter;
 })();
diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 9949e5fa..0dda08d7 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -8,18 +8,19 @@
 (function() {
   var fs = require('fs');
   var path = require('path');
-
   var hogan = require('hogan.js');

   var hoganTemplates = require('./templates/diff2html-templates.js');

-  var templatesPath = path.resolve(__dirname, 'templates');
+  var extraTemplates;

-  function HoganJsUtils() {
+  function HoganJsUtils(configuration) {
+    this.config = configuration || {};
+    extraTemplates = this.config.templates || {};
   }

-  HoganJsUtils.prototype.render = function(namespace, view, params, configuration) {
-    var template = this.template(namespace, view, configuration);
+  HoganJsUtils.prototype.render = function(namespace, view, params) {
+    var template = this.template(namespace, view);
     if (template) {
       return template.render(params);
     }
@@ -27,17 +28,16 @@
     return null;
   };

-  HoganJsUtils.prototype.template = function(namespace, view, configuration) {
-    var config = configuration || {};
+  HoganJsUtils.prototype.template = function(namespace, view) {
     var templateKey = this._templateKey(namespace, view);

-    return this._getTemplate(templateKey, config);
+    return this._getTemplate(templateKey);
   };

-  HoganJsUtils.prototype._getTemplate = function(templateKey, config) {
+  HoganJsUtils.prototype._getTemplate = function(templateKey) {
     var template;

-    if (!config.noCache) {
+    if (!this.config.noCache) {
       template = this._readFromCache(templateKey);
     }

@@ -53,6 +53,7 @@

     try {
       if (fs.readFileSync) {
+        var templatesPath = path.resolve(__dirname, 'templates');
         var templatePath = path.join(templatesPath, templateKey);
         var templateContent = fs.readFileSync(templatePath + '.mustache', 'utf8');
         template = hogan.compile(templateContent);
@@ -66,12 +67,16 @@
   };

   HoganJsUtils.prototype._readFromCache = function(templateKey) {
-    return hoganTemplates[templateKey];
+    return extraTemplates[templateKey] || hoganTemplates[templateKey];
   };

   HoganJsUtils.prototype._templateKey = function(namespace, view) {
     return namespace + '-' + view;
   };

-  module.exports.HoganJsUtils = new HoganJsUtils();
+  HoganJsUtils.prototype.compile = function(templateStr) {
+    return hogan.compile(templateStr);
+  };
+
+  module.exports.HoganJsUtils = HoganJsUtils;
 })();
diff --git a/src/html-printer.js b/src/html-printer.js
index 585d5b66..13f83047 100644
--- a/src/html-printer.js
+++ b/src/html-printer.js
@@ -8,6 +8,7 @@
 (function() {
   var LineByLinePrinter = require('./line-by-line-printer.js').LineByLinePrinter;
   var SideBySidePrinter = require('./side-by-side-printer.js').SideBySidePrinter;
+  var FileListPrinter = require('./file-list-printer.js').FileListPrinter;

   function HtmlPrinter() {
   }
@@ -22,5 +23,10 @@
     return sideBySidePrinter.generateSideBySideJsonHtml(diffFiles);
   };

+  HtmlPrinter.prototype.generateFileListSummary = function(diffJson, config) {
+    var fileListPrinter = new FileListPrinter(config);
+    return fileListPrinter.generateFileList(diffJson);
+  };
+
   module.exports.HtmlPrinter = new HtmlPrinter();
 })();
diff --git a/src/line-by-line-printer.js b/src/line-by-line-printer.js
index b07eb53c..d230bedd 100644
--- a/src/line-by-line-printer.js
+++ b/src/line-by-line-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'line-by-line';
   var iconsBaseTemplatesPath = 'icon';
@@ -19,6 +20,9 @@

   function LineByLinePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   LineByLinePrinter.prototype.makeFileDiffHtml = function(file, diffs) {
diff --git a/src/side-by-side-printer.js b/src/side-by-side-printer.js
index bbf1dc8d..5e3033b3 100644
--- a/src/side-by-side-printer.js
+++ b/src/side-by-side-printer.js
@@ -11,7 +11,8 @@
   var utils = require('./utils.js').Utils;
   var Rematch = require('./rematch.js').Rematch;

-  var hoganUtils = require('./hoganjs-utils.js').HoganJsUtils;
+  var hoganUtils;
+
   var genericTemplatesPath = 'generic';
   var baseTemplatesPath = 'side-by-side';
   var iconsBaseTemplatesPath = 'icon';
@@ -26,6 +27,9 @@

   function SideBySidePrinter(config) {
     this.config = config;
+
+    var HoganJsUtils = require('./hoganjs-utils.js').HoganJsUtils;
+    hoganUtils = new HoganJsUtils(config);
   }

   SideBySidePrinter.prototype.makeDiffHtml = function(file, diffs) {
diff --git a/test/file-list-printer-tests.js b/test/file-list-printer-tests.js
index a502a46f..60ea3208 100644
--- a/test/file-list-printer-tests.js
+++ b/test/file-list-printer-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var fileListPrinter = require('../src/file-list-printer.js').FileListPrinter;
+var fileListPrinter = new (require('../src/file-list-printer.js').FileListPrinter)();

 describe('FileListPrinter', function() {
   describe('generateFileList', function() {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 190bf6f8..3bb754ac 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -1,6 +1,6 @@
 var assert = require('assert');

-var HoganJsUtils = require('../src/hoganjs-utils.js').HoganJsUtils;
+var HoganJsUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)();
 var diffParser = require('../src/diff-parser.js').DiffParser;

 describe('HoganJsUtils', function() {
@@ -21,16 +21,28 @@ describe('HoganJsUtils', function() {
       });
       assert.equal(emptyDiffHtml, result);
     });
+
     it('should render view without cache', function() {
       var result = HoganJsUtils.render('generic', 'empty-diff', {
         contentClass: 'd2h-code-line',
         diffParser: diffParser
       }, {noCache: true});
-      assert.equal(emptyDiffHtml + '\n', result);
+      assert.equal(emptyDiffHtml, result);
     });
+
     it('should return null if template is missing', function() {
-      var result = HoganJsUtils.render('generic', 'missing-template', {}, {noCache: true});
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)({noCache: true});
+      var result = hoganUtils.render('generic', 'missing-template', {});
       assert.equal(null, result);
     });
+
+    it('should allow templates to be overridden', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+
+      var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
diff --git a/test/line-by-line-tests.js b/test/line-by-line-tests.js
index 1cd92073..8869b3df 100644
--- a/test/line-by-line-tests.js
+++ b/test/line-by-line-tests.js
@@ -14,7 +14,7 @@ describe('LineByLinePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expected, fileHtml);
     });
@@ -422,7 +422,6 @@ describe('LineByLinePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                &lt;/tbody&gt;\n' +
         '            &lt;/table&gt;\n' +
         '        &lt;/div&gt;\n' +
diff --git a/test/side-by-side-printer-tests.js b/test/side-by-side-printer-tests.js
index 76625f8e..771daaa5 100644
--- a/test/side-by-side-printer-tests.js
+++ b/test/side-by-side-printer-tests.js
@@ -14,7 +14,7 @@ describe('SideBySidePrinter', function() {
         '            File without changes\n' +
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
-        '&lt;/tr&gt;\n';
+        '&lt;/tr&gt;';

       assert.equal(expectedRight, fileHtml.right);
       assert.equal(expectedLeft, fileHtml.left);
@@ -324,7 +324,6 @@ describe('SideBySidePrinter', function() {
         '        &lt;/div&gt;\n' +
         '    &lt;/td&gt;\n' +
         '&lt;/tr&gt;\n' +
-        '\n' +
         '                    &lt;/tbody&gt;\n' +
         '                &lt;/table&gt;\n' +
         '            &lt;/div&gt;\n' +

From f3cadb96677d0eb82fc2752dc3ffbf35ca9b5bdb Mon Sep 17 00:00:00 2001
From: Rodrigo Fernandes &lt;rtfrodrigo@gmail.com&gt;
Date: Sat, 15 Oct 2016 13:21:22 +0100
Subject: [PATCH 2/2] Allow uncompiled templates

---
 README.md                 |  3 +++
 src/hoganjs-utils.js      |  7 +++++++
 test/hogan-cache-tests.js | 24 +++++++++++++++++++++++-
 3 files changed, 33 insertions(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 132c8a28..46909f25 100644
--- a/README.md
+++ b/README.md
@@ -98,6 +98,9 @@ The HTML output accepts a Javascript object with configuration. Possible options
   - `synchronisedScroll`: scroll both panes in side-by-side mode: `true` or `false`, default is `false`
   - `matchWordsThreshold`: similarity threshold for word matching, default is 0.25
   - `matchingMaxComparisons`: perform at most this much comparisons for line matching a block of changes, default is `2500`
+  - `templates`: object with previously compiled templates to replace parts of the html
+  - `rawTemplates`: object with raw not compiled templates to replace parts of the html
+  &gt; For more information regarding the possible templates look into [src/templates](https://github.com/rtfpessoa/diff2html/tree/master/src/templates)

 ## Diff2HtmlUI Helper

diff --git a/src/hoganjs-utils.js b/src/hoganjs-utils.js
index 0dda08d7..b2e9c275 100644
--- a/src/hoganjs-utils.js
+++ b/src/hoganjs-utils.js
@@ -17,6 +17,13 @@
   function HoganJsUtils(configuration) {
     this.config = configuration || {};
     extraTemplates = this.config.templates || {};
+
+    var rawTemplates = this.config.rawTemplates || {};
+    for (var templateName in rawTemplates) {
+      if (rawTemplates.hasOwnProperty(templateName)) {
+        if (!extraTemplates[templateName]) extraTemplates[templateName] = this.compile(rawTemplates[templateName]);
+      }
+    }
   }

   HoganJsUtils.prototype.render = function(namespace, view, params) {
diff --git a/test/hogan-cache-tests.js b/test/hogan-cache-tests.js
index 3bb754ac..a34839c0 100644
--- a/test/hogan-cache-tests.js
+++ b/test/hogan-cache-tests.js
@@ -36,7 +36,7 @@ describe('HoganJsUtils', function() {
       assert.equal(null, result);
     });

-    it('should allow templates to be overridden', function() {
+    it('should allow templates to be overridden with compiled templates', function() {
       var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');

       var config = {templates: {'generic-empty-diff': emptyDiffTemplate}};
@@ -44,5 +44,27 @@ describe('HoganJsUtils', function() {
       var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
       assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
     });
+
+    it('should allow templates to be overridden with uncompiled templates', function() {
+      var emptyDiffTemplate = '&lt;p&gt;&lt;/p&gt;';
+
+      var config = {rawTemplates: {'generic-empty-diff': emptyDiffTemplate}};
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
+
+    it('should allow templates to be overridden giving priority to compiled templates', function() {
+      var emptyDiffTemplate = HoganJsUtils.compile('&lt;p&gt;&lt;/p&gt;');
+      var emptyDiffTemplateUncompiled = '&lt;p&gt;Not used!&lt;/p&gt;';
+
+      var config = {
+        templates: {'generic-empty-diff': emptyDiffTemplate},
+        rawTemplates: {'generic-empty-diff': emptyDiffTemplateUncompiled}
+      };
+      var hoganUtils = new (require('../src/hoganjs-utils.js').HoganJsUtils)(config);
+      var result = hoganUtils.render('generic', 'empty-diff', {myName: 'Rodrigo Fernandes'});
+      assert.equal('&lt;p&gt;Rodrigo Fernandes&lt;/p&gt;', result);
+    });
   });
 });
</code></pre>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[this is how you can display code diffs]]></summary></entry><entry><title type="html">a post with advanced image components</title><link href="https://xli7654321.github.io/blog/2024/advanced-images/" rel="alternate" type="text/html" title="a post with advanced image components"/><published>2024-01-27T11:46:00+00:00</published><updated>2024-01-27T11:46:00+00:00</updated><id>https://xli7654321.github.io/blog/2024/advanced-images</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/advanced-images/"><![CDATA[<p>This is an example post with advanced image components.</p> <h2 id="image-slider">Image Slider</h2> <p>This is a simple image slider. It uses the <a href="https://swiperjs.com/">Swiper</a> library. Check the <a href="https://swiperjs.com/demos">examples page</a> for more information of what you can achieve with it.</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/9-480.webp 480w,/assets/img/9-800.webp 800w,/assets/img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/7-480.webp 480w,/assets/img/7-800.webp 800w,/assets/img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/8-480.webp 480w,/assets/img/8-800.webp 800w,/assets/img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/10-480.webp 480w,/assets/img/10-800.webp 800w,/assets/img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/12-480.webp 480w,/assets/img/12-800.webp 800w,/assets/img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="image-comparison-slider">Image Comparison Slider</h2> <p>This is a simple image comparison slider. It uses the <a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a> library. Check the <a href="https://img-comparison-slider.sneas.io/examples.html">examples page</a> for more information of what you can achieve with it.</p> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic-480.webp 480w,/assets/img/prof_pic-800.webp 800w,/assets/img/prof_pic-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color-480.webp 480w,/assets/img/prof_pic_color-800.webp 800w,/assets/img/prof_pic_color-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="images"/><summary type="html"><![CDATA[this is what advanced image components could look like]]></summary></entry><entry><title type="html">a post with vega lite</title><link href="https://xli7654321.github.io/blog/2024/vega-lite/" rel="alternate" type="text/html" title="a post with vega lite"/><published>2024-01-27T00:20:00+00:00</published><updated>2024-01-27T00:20:00+00:00</updated><id>https://xli7654321.github.io/blog/2024/vega-lite</id><content type="html" xml:base="https://xli7654321.github.io/blog/2024/vega-lite/"><![CDATA[<p>This is an example post with some <a href="https://vega.github.io/vega-lite/">vega lite</a> code.</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="charts"/><summary type="html"><![CDATA[this is what included vega lite code could look like]]></summary></entry></feed>